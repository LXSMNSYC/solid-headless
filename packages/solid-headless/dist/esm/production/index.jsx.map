{
  "version": 3,
  "sources": ["../../../src/headless/Disclosure.tsx", "../../../src/utils/use-controlled-signal.ts", "../../../src/headless/Select.tsx", "../../../src/headless/Toggle.tsx", "../../../src/components/Transition.tsx", "../../../src/utils/dynamic-prop.ts", "../../../src/components/Disclosure.tsx", "../../../src/utils/Fragment.tsx", "../../../src/components/Button.tsx", "../../../src/components/Accordion.tsx", "../../../src/utils/query-nodes.ts", "../../../src/components/RadioGroup.tsx", "../../../src/components/Listbox.tsx", "../../../src/components/Dialog.tsx", "../../../src/utils/get-focusable-elements.ts", "../../../src/components/Toolbar.tsx", "../../../src/components/Select.tsx", "../../../src/components/Toggle.tsx", "../../../src/components/Popover.tsx", "../../../src/components/Alert.tsx", "../../../src/components/AlertDialog.tsx", "../../../src/components/Toast.tsx", "../../../src/components/Checkbox.tsx", "../../../src/components/Menu.tsx", "../../../src/components/ContextMenu.tsx", "../../../src/components/Feed.tsx", "../../../src/components/CommandBar.tsx", "../../../src/components/ColorScheme.tsx"],
  "sourcesContent": ["import {\n  createContext,\n  JSX,\n  useContext,\n} from 'solid-js';\nimport useControlledSignal from '../utils/use-controlled-signal';\n\nexport interface HeadlessDisclosureOptions {\n  isOpen?: boolean;\n  defaultOpen?: boolean;\n  disabled?: boolean;\n  onChange?: (state: boolean) => void;\n  CONTROLLED?: boolean;\n}\n\nexport interface HeadlessDisclosureProperties {\n  isOpen(): boolean;\n  setState(newState: boolean): void;\n  disabled(): boolean;\n}\n\nexport function useHeadlessDisclosure(\n  options: HeadlessDisclosureOptions = {},\n): HeadlessDisclosureProperties {\n  const isControlled = 'CONTROLLED' in options ? options.CONTROLLED : 'isOpen' in options;\n\n  const [signal, setSignal] = useControlledSignal(\n    !!options.defaultOpen,\n    isControlled ? () => !!options.isOpen : undefined,\n    (value) => options.onChange?.(value),\n  );\n\n  return {\n    isOpen() {\n      return signal();\n    },\n    setState(value) {\n      if (!options.disabled) {\n        setSignal(value);\n      }\n    },\n    disabled() {\n      return !!options.disabled;\n    },\n  };\n}\n\nconst HeadlessDisclosureContext = createContext<HeadlessDisclosureProperties>();\n\nexport type HeadlessDisclosureRootRenderProp = (\n  (properties: HeadlessDisclosureProperties) => JSX.Element\n);\n\nfunction isHeadlessDisclosureRootRenderProp(\n  children: HeadlessDisclosureRootRenderProp | JSX.Element,\n): children is HeadlessDisclosureRootRenderProp {\n  return typeof children === 'function' && children.length > 0;\n}\n\nexport interface HeadlessDisclosureRootProps extends HeadlessDisclosureOptions {\n  children?: HeadlessDisclosureRootRenderProp | JSX.Element;\n}\n\nexport function HeadlessDisclosureRoot(props: HeadlessDisclosureRootProps): JSX.Element {\n  const properties = useHeadlessDisclosure(props);\n  return (\n    <HeadlessDisclosureContext.Provider value={properties}>\n      {(() => {\n        const body = props.children;\n        if (isHeadlessDisclosureRootRenderProp(body)) {\n          return body(properties);\n        }\n        return body;\n      })()}\n    </HeadlessDisclosureContext.Provider>\n  );\n}\n\nexport function useHeadlessDisclosureChild(): HeadlessDisclosureProperties {\n  const properties = useContext(HeadlessDisclosureContext);\n  if (properties) {\n    return properties;\n  }\n  throw new Error('`useDisclosureChild` must be used within DisclosureRoot.');\n}\n\nexport type HeadlessDisclosureChildRenderProp = (\n  (properties: HeadlessDisclosureProperties) => JSX.Element\n);\n\nfunction isHeadlessDisclosureChildRenderProp(\n  children: HeadlessDisclosureChildRenderProp | JSX.Element,\n): children is HeadlessDisclosureChildRenderProp {\n  return typeof children === 'function' && children.length > 0;\n}\n\nexport interface HeadlessDisclosureChildProps {\n  children?: HeadlessDisclosureChildRenderProp | JSX.Element;\n}\n\nexport function HeadlessDisclosureChild(props: HeadlessDisclosureChildProps): JSX.Element {\n  const properties = useHeadlessDisclosureChild();\n  const body = props.children;\n  if (isHeadlessDisclosureChildRenderProp(body)) {\n    return body(properties);\n  }\n  return body;\n}\n", "import { Accessor, createSignal } from 'solid-js';\n\nexport default function useControlledSignal<T>(\n  initialValue: T,\n  read: Accessor<T> | undefined,\n  write: (value: T) => void,\n): [Accessor<T>, (value: T) => void] {\n  if (read) {\n    return [read, write];\n  }\n  const [signal, setSignal] = createSignal(initialValue);\n  return [\n    signal,\n    (value: T) => {\n      setSignal(() => value);\n      write(value);\n    },\n  ];\n}\n", "import {\n  createContext,\n  createSignal,\n  JSX,\n  untrack,\n  useContext,\n} from 'solid-js';\nimport { Ref } from '../utils/types';\nimport useControlledSignal from '../utils/use-controlled-signal';\n\nexport interface HeadlessSelectMultipleOptions<T> {\n  multiple: true;\n  toggleable?: boolean;\n  defaultValue?: T[];\n  value?: T[];\n  onChange?: (value: T[]) => void;\n  disabled?: boolean;\n  CONTROLLED?: boolean;\n}\n\nexport interface HeadlessSelectSingleOptions<T> {\n  multiple?: false;\n  toggleable?: boolean;\n  defaultValue?: T;\n  value?: T;\n  onChange?: (value?: T) => void;\n  disabled?: boolean;\n  CONTROLLED?: boolean;\n}\n\nexport type HeadlessSelectOptions<T> =\n  | HeadlessSelectSingleOptions<T>\n  | HeadlessSelectMultipleOptions<T>;\n\nexport interface HeadlessSelectProperties<T> {\n  isSelected(value: T): boolean;\n  select(value: T): void;\n  hasSelected(): boolean;\n  isActive(value: T): boolean;\n  hasActive(): boolean;\n  focus(value: T): void;\n  blur(): void;\n  disabled(): boolean;\n}\n\nexport function useHeadlessSelect<T>(\n  options: HeadlessSelectOptions<T>,\n): HeadlessSelectProperties<T> {\n  const [active, setActive] = createSignal<Ref<T>>();\n\n  if (options.multiple) {\n    const isControlled = 'CONTROLLED' in options ? options.CONTROLLED : 'value' in options;\n\n    const [selectedValues, setSelectedValues] = useControlledSignal(\n      options.defaultValue ?? [],\n      isControlled ? () => options.value ?? [] : undefined,\n      (value) => options.onChange?.(value ?? []),\n    );\n\n    return {\n      isSelected(value) {\n        return new Set(selectedValues()).has(value);\n      },\n      select(value) {\n        const set = new Set(untrack(selectedValues));\n        if (options.toggleable && set.has(value)) {\n          set.delete(value);\n        } else {\n          set.add(value);\n        }\n        setSelectedValues([\n          ...set,\n        ]);\n      },\n      hasSelected() {\n        return selectedValues().length > 0;\n      },\n      disabled() {\n        return !!options.disabled;\n      },\n      hasActive() {\n        return !!active();\n      },\n      isActive(value) {\n        const ref = active();\n        if (ref) {\n          return Object.is(value, ref.value);\n        }\n        return false;\n      },\n      focus(value) {\n        return setActive({\n          value,\n        });\n      },\n      blur() {\n        return setActive(undefined);\n      },\n    };\n  }\n\n  const isControlled = 'CONTROLLED' in options ? options.CONTROLLED : 'value' in options;\n\n  const [selectedValue, setSelectedValue] = useControlledSignal(\n    options.defaultValue ?? undefined,\n    isControlled ? (() => options.value) : undefined,\n    (value) => options.onChange?.(value),\n  );\n\n  return {\n    isSelected(value) {\n      return Object.is(value, selectedValue());\n    },\n    select(value) {\n      if (options.toggleable && Object.is(untrack(selectedValue), value)) {\n        setSelectedValue(undefined);\n      } else {\n        setSelectedValue(value);\n      }\n    },\n    hasSelected() {\n      return selectedValue() != null;\n    },\n    disabled() {\n      return !!options.disabled;\n    },\n    hasActive() {\n      return !!active();\n    },\n    isActive(value) {\n      const ref = active();\n      if (ref) {\n        return Object.is(value, ref.value);\n      }\n      return false;\n    },\n    focus(value) {\n      return setActive({\n        value,\n      });\n    },\n    blur() {\n      return setActive(undefined);\n    },\n  };\n}\n\nconst HeadlessSelectContext = createContext<HeadlessSelectProperties<any>>();\n\nexport type HeadlessSelectRootRenderProp<T> = (\n  (properties: HeadlessSelectProperties<T>) => JSX.Element\n);\n\nfunction isHeadlessSelectRootRenderProp<T>(\n  children: HeadlessSelectRootRenderProp<T> | JSX.Element,\n): children is HeadlessSelectRootRenderProp<T> {\n  return typeof children === 'function' && children.length > 0;\n}\n\nexport type HeadlessSelectRootProps<T> = {\n  children?: HeadlessSelectRootRenderProp<T> | JSX.Element;\n} & HeadlessSelectOptions<T>;\n\nexport function HeadlessSelectRoot<T>(props: HeadlessSelectRootProps<T>): JSX.Element {\n  const properties = useHeadlessSelect(props);\n  return (\n    <HeadlessSelectContext.Provider value={properties}>\n      {(() => {\n        const body = props.children;\n        if (isHeadlessSelectRootRenderProp(body)) {\n          return body(properties);\n        }\n        return body;\n      })()}\n    </HeadlessSelectContext.Provider>\n  );\n}\n\nexport function useHeadlessSelectChild<T>(): HeadlessSelectProperties<T> {\n  const properties = useContext(HeadlessSelectContext);\n  if (properties) {\n    return properties;\n  }\n  throw new Error('`useHeadlessSelectChild` must be used within HeadlessSelectRoot.');\n}\n\nexport type HeadlessSelectChildRenderProp<T> = (\n  (properties: HeadlessSelectProperties<T>) => JSX.Element\n);\n\nfunction isHeadlessSelectChildRenderProp<T>(\n  children: HeadlessSelectChildRenderProp<T> | JSX.Element,\n): children is HeadlessSelectChildRenderProp<T> {\n  return typeof children === 'function' && children.length > 0;\n}\n\nexport interface HeadlessSelectChildProps<T> {\n  children?: HeadlessSelectChildRenderProp<T> | JSX.Element;\n}\n\nexport function HeadlessSelectChild<T>(props: HeadlessSelectChildProps<T>): JSX.Element {\n  const properties = useHeadlessSelectChild<T>();\n  const body = props.children;\n  if (isHeadlessSelectChildRenderProp(body)) {\n    return body(properties);\n  }\n  return body;\n}\n\nexport interface HeadlessSelectOptionProperties {\n  isSelected(): boolean;\n  select(): void;\n  isActive(): boolean;\n  focus(): void;\n  blur(): void;\n  disabled(): boolean;\n}\n\nexport function useHeadlessSelectOption<T>(\n  value: () => T,\n  disabled?: () => boolean,\n): HeadlessSelectOptionProperties {\n  const properties = useHeadlessSelectChild<T>();\n  const isDisabled = () => disabled?.() || properties.disabled();\n  return {\n    isSelected() {\n      return properties.isSelected(value());\n    },\n    isActive() {\n      return properties.isActive(value());\n    },\n    select() {\n      if (!isDisabled()) {\n        properties.select(value());\n      }\n    },\n    focus() {\n      if (!isDisabled()) {\n        properties.focus(value());\n      }\n    },\n    blur() {\n      if (!isDisabled() && this.isActive()) {\n        properties.blur();\n      }\n    },\n    disabled: isDisabled,\n  };\n}\n\nexport type HeadlessSelectOptionRenderProp = (\n  (properties: HeadlessSelectOptionProperties) => JSX.Element\n);\n\nfunction isHeadlessSelectOptionRenderProp(\n  children: HeadlessSelectOptionRenderProp | JSX.Element,\n): children is HeadlessSelectOptionRenderProp {\n  return typeof children === 'function' && children.length > 0;\n}\n\nconst HeadlessSelectOptionContext = createContext<HeadlessSelectOptionProperties>();\n\nexport interface HeadlessSelectOptionProps<T> {\n  value: T;\n  disabled?: boolean,\n  children?: HeadlessSelectOptionRenderProp | JSX.Element;\n}\n\nexport function HeadlessSelectOption<T>(\n  props: HeadlessSelectOptionProps<T>,\n): JSX.Element {\n  const properties = useHeadlessSelectOption(\n    () => props.value,\n    () => !!props.disabled,\n  );\n  return (\n    <HeadlessSelectOptionContext.Provider value={properties}>\n      {(() => {\n        const body = props.children;\n        if (isHeadlessSelectOptionRenderProp(body)) {\n          return body(properties);\n        }\n        return body;\n      })()}\n    </HeadlessSelectOptionContext.Provider>\n  );\n}\n\nexport function useHeadlessSelectOptionChild(): HeadlessSelectOptionProperties {\n  const properties = useContext(HeadlessSelectOptionContext);\n  if (properties) {\n    return properties;\n  }\n  throw new Error('`useHeadlessSelectChild` must be used within HeadlessSelectOption');\n}\n\nexport interface HeadlessSelectOptionChildProps {\n  children?: HeadlessSelectOptionRenderProp | JSX.Element;\n}\n\nexport function HeadlessSelectOptionChild(\n  props: HeadlessSelectOptionChildProps,\n): JSX.Element {\n  const properties = useHeadlessSelectOptionChild();\n  const body = props.children;\n  if (isHeadlessSelectOptionRenderProp(body)) {\n    return body(properties);\n  }\n  return body;\n}\n", "import {\n  createContext,\n  JSX,\n  useContext,\n} from 'solid-js';\nimport useControlledSignal from '../utils/use-controlled-signal';\n\nexport interface HeadlessToggleOptions {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  disabled?: boolean;\n  onChange?: (state?: boolean) => void;\n  CONTROLLED?: boolean;\n}\n\nexport interface HeadlessToggleProperties {\n  checked(): boolean | undefined;\n  setState(newState?: boolean): void;\n  disabled(): boolean;\n}\n\nexport function useHeadlessToggle(\n  options: HeadlessToggleOptions = {},\n): HeadlessToggleProperties {\n  const isControlled = 'CONTROLLED' in options ? options.CONTROLLED : 'checked' in options;\n\n  const [signal, setSignal] = useControlledSignal(\n    options.defaultChecked,\n    isControlled ? () => options.checked : undefined,\n    (value) => options.onChange?.(value),\n  );\n\n  return {\n    checked() {\n      return signal();\n    },\n    setState(value) {\n      if (!options.disabled) {\n        setSignal(value);\n        options.onChange?.(value);\n      }\n    },\n    disabled() {\n      return !!options.disabled;\n    },\n  };\n}\n\nconst HeadlessToggleContext = createContext<HeadlessToggleProperties>();\n\nexport type HeadlessToggleRootRenderProp = (\n  (properties: HeadlessToggleProperties) => JSX.Element\n);\n\nfunction isHeadlessToggleRootRenderProp(\n  children: HeadlessToggleRootRenderProp | JSX.Element,\n): children is HeadlessToggleRootRenderProp {\n  return typeof children === 'function' && children.length > 0;\n}\n\nexport interface HeadlessToggleRootProps extends HeadlessToggleOptions {\n  children?: HeadlessToggleRootRenderProp | JSX.Element;\n}\n\nexport function HeadlessToggleRoot(props: HeadlessToggleRootProps): JSX.Element {\n  const properties = useHeadlessToggle(props);\n  return (\n    <HeadlessToggleContext.Provider value={properties}>\n      {(() => {\n        const body = props.children;\n        if (isHeadlessToggleRootRenderProp(body)) {\n          return body(properties);\n        }\n        return body;\n      })()}\n    </HeadlessToggleContext.Provider>\n  );\n}\n\nexport function useHeadlessToggleChild(): HeadlessToggleProperties {\n  const properties = useContext(HeadlessToggleContext);\n  if (properties) {\n    return properties;\n  }\n  throw new Error('`useToggleChild` must be used within ToggleRoot.');\n}\n\nexport type HeadlessToggleChildRenderProp = (\n  (properties: HeadlessToggleProperties) => JSX.Element\n);\n\nfunction isHeadlessToggleChildRenderProp(\n  children: HeadlessToggleChildRenderProp | JSX.Element,\n): children is HeadlessToggleChildRenderProp {\n  return typeof children === 'function' && children.length > 0;\n}\n\nexport interface HeadlessToggleChildProps {\n  children?: HeadlessToggleChildRenderProp | JSX.Element;\n}\n\nexport function HeadlessToggleChild(props: HeadlessToggleChildProps): JSX.Element {\n  const properties = useHeadlessToggleChild();\n  const body = props.children;\n  if (isHeadlessToggleChildRenderProp(body)) {\n    return body(properties);\n  }\n  return body;\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  Show,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\n\ninterface TransitionRootContext {\n  show: boolean;\n}\n\nconst TransitionRootContext = createContext<TransitionRootContext>();\n\nfunction useTransitionRootContext(componentName: string): TransitionRootContext {\n  const context = useContext(TransitionRootContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Transition>`);\n}\n\nexport type TransitionBaseChildProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n  appear?: boolean;\n  enter?: string;\n  enterFrom?: string;\n  enterTo?: string;\n  entered?: string;\n  leave?: string;\n  leaveFrom?: string;\n  leaveTo?: string;\n  beforeEnter?: () => void;\n  afterEnter?: () => void;\n  beforeLeave?: () => void;\n  afterLeave?: () => void;\n};\n\nfunction addClassList(ref: HTMLElement, classes: string[]) {\n  const filtered = classes.filter((value) => value);\n  if (filtered.length) {\n    ref.classList.add(...filtered);\n  }\n}\nfunction removeClassList(ref: HTMLElement, classes: string[]) {\n  const filtered = classes.filter((value) => value);\n  if (filtered.length) {\n    ref.classList.remove(...filtered);\n  }\n}\n\nexport type TransitionChildProps<T extends ValidConstructor = 'div'> =\n  TransitionBaseChildProps<T>\n    & WithRef<T>\n    & Omit<DynamicProps<T>, keyof TransitionBaseChildProps<T>>;\n\nexport function TransitionChild<T extends ValidConstructor = 'div'>(\n  props: TransitionChildProps<T>,\n): JSX.Element {\n  const values = useTransitionRootContext('TransitionChild');\n\n  const [visible, setVisible] = createSignal(values.show);\n  const [ref, setRef] = createSignal<DynamicNode<T>>();\n\n  let initial = true;\n\n  function transition(element: HTMLElement, shouldEnter: boolean): void {\n    if (shouldEnter) {\n      if (initial) {\n        const enter = props.enter?.split(' ') ?? [];\n        const enterFrom = props.enterFrom?.split(' ') ?? [];\n        const enterTo = props.enterTo?.split(' ') ?? [];\n        const entered = props.entered?.split(' ') ?? [];\n\n        const endTransition = () => {\n          removeClassList(element, enter);\n          removeClassList(element, enterTo);\n          addClassList(element, entered);\n          props.afterEnter?.();\n        };\n\n        props.beforeEnter?.();\n        addClassList(element, enter);\n        addClassList(element, enterFrom);\n\n        requestAnimationFrame(() => {\n          removeClassList(element, enterFrom);\n          addClassList(element, enterTo);\n          element.addEventListener('transitionend', endTransition, { once: true });\n          element.addEventListener('animationend', endTransition, { once: true });\n        });\n      }\n    } else {\n      const leave = props.leave?.split(' ') ?? [];\n      const leaveFrom = props.leaveFrom?.split(' ') ?? [];\n      const leaveTo = props.leaveTo?.split(' ') ?? [];\n      const entered = props.entered?.split(' ') ?? [];\n      props.beforeLeave?.();\n      removeClassList(element, entered);\n      addClassList(element, leave);\n      addClassList(element, leaveFrom);\n      requestAnimationFrame(() => {\n        removeClassList(element, leaveFrom);\n        addClassList(element, leaveTo);\n      });\n      const endTransition = () => {\n        removeClassList(element, leave);\n        removeClassList(element, leaveTo);\n        setVisible(false);\n        props.afterLeave?.();\n      };\n      element.addEventListener('transitionend', endTransition, { once: true });\n      element.addEventListener('animationend', endTransition, { once: true });\n    }\n  }\n\n  createEffect(() => {\n    const shouldShow = values.show;\n\n    if (shouldShow) {\n      setVisible(true);\n    }\n\n    const internalRef = ref();\n    if (internalRef instanceof HTMLElement) {\n      transition(internalRef, shouldShow);\n    } else {\n      // Ref is missing, reset initial\n      initial = true;\n    }\n  });\n\n  return (\n    <Show\n      when={props.unmount ?? true}\n      fallback={(\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'enter',\n            'enterFrom',\n            'enterTo',\n            'leave',\n            'leaveFrom',\n            'leaveTo',\n            'unmount',\n            'afterEnter',\n            'afterLeave',\n            'appear',\n            'beforeEnter',\n            'beforeLeave',\n            'entered',\n            'ref',\n          ])}\n          ref={createRef(props, (e) => {\n            setRef(() => e);\n          })}\n        >\n          {props.children}\n        </Dynamic>\n      )}\n    >\n      <Show when={visible()}>\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'enter',\n            'enterFrom',\n            'enterTo',\n            'leave',\n            'leaveFrom',\n            'leaveTo',\n            'unmount',\n            'afterEnter',\n            'afterLeave',\n            'appear',\n            'beforeEnter',\n            'beforeLeave',\n            'entered',\n            'ref',\n          ])}\n          ref={createRef(props, (e) => {\n            setRef(() => e);\n          })}\n        >\n          {props.children}\n        </Dynamic>\n      </Show>\n    </Show>\n  );\n}\n\nexport type TransitionProps<T extends ValidConstructor = 'div'> = {\n  show: boolean;\n  appear?: boolean;\n} & TransitionChildProps<T>;\n\nexport function Transition<T extends ValidConstructor = 'div'>(\n  props: TransitionProps<T>,\n): JSX.Element {\n  const excludedProps = omitProps(props, [\n    'show',\n  ]);\n  return (\n    <TransitionRootContext.Provider\n      value={{\n        get show() {\n          return props.show;\n        },\n      }}\n    >\n      <TransitionChild\n        {...excludedProps}\n      />\n    </TransitionRootContext.Provider>\n  );\n}\n", "import { JSX } from 'solid-js/jsx-runtime';\n\nexport type ValidElements = keyof JSX.IntrinsicElements;\nexport type ValidComponent<P> = (props: P) => JSX.Element;\nexport type ValidConstructor = ValidElements | ValidComponent<any>;\n\nexport type DynamicProps<T extends ValidConstructor> =\n  T extends ValidElements\n    ? JSX.IntrinsicElements[T]\n    :\n  T extends ValidComponent<infer U>\n    ? U\n    : never;\n\ntype UnboxIntrinsicElements<T> =\n  T extends JSX.HTMLAttributes<infer U>\n    ? U\n    : never;\n\ntype RefCallback<T> = (el: T) => void;\ntype RefField<T> = T | RefCallback<T>;\n\ntype UnboxComponentProp<U> =\n  U extends { ref: infer X }\n    ? X\n    : never;\n\nexport type DynamicNode<T extends ValidConstructor> =\n  T extends ValidElements\n    ? UnboxIntrinsicElements<JSX.IntrinsicElements[T]>\n    :\n  T extends ValidComponent<infer U>\n    ? UnboxComponentProp<U>\n    : never;\n\nexport interface WithRef<T extends ValidConstructor> {\n  ref?: RefField<DynamicNode<T>>;\n}\n\nfunction isRefFunction<U extends ValidConstructor>(\n  callback?: RefField<DynamicNode<U>>,\n): callback is RefCallback<DynamicNode<U>> {\n  return typeof callback === 'function';\n}\n\nexport function createRef<U extends ValidConstructor>(\n  props: WithRef<U>,\n  callback: RefCallback<DynamicNode<U>>,\n): RefCallback<DynamicNode<U>> {\n  return (e) => {\n    if ('ref' in props) {\n      if (isRefFunction(props.ref)) {\n        props.ref(e);\n      } else {\n        props.ref = e;\n      }\n    }\n    callback(e);\n  };\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  Show,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport Fragment from '../utils/Fragment';\nimport {\n  Button,\n  ButtonProps,\n} from './Button';\n\ninterface DisclosureContext {\n  ownerID: string;\n  buttonID: string;\n  panelID: string;\n}\n\nconst DisclosureContext = createContext<DisclosureContext>();\n\nfunction useDisclosureContext(componentName: string): DisclosureContext {\n  const context = useContext(DisclosureContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Disclosure>`);\n}\n\nexport type DisclosureProps<T extends ValidConstructor = typeof Fragment> = {\n  as?: T;\n} & HeadlessDisclosureRootProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps>;\n\nexport function Disclosure<T extends ValidConstructor = typeof Fragment>(\n  props: DisclosureProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const buttonID = createUniqueId();\n  const panelID = createUniqueId();\n\n  return (\n    <DisclosureContext.Provider\n      value={{\n        ownerID,\n        buttonID,\n        panelID,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? Fragment}\n        {...omitProps(props, [\n          'isOpen',\n          'as',\n          'children',\n          'disabled',\n          'defaultOpen',\n          'onChange',\n        ])}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n        data-sh-disclosure={ownerID}\n      >\n        <HeadlessDisclosureRoot\n          CONTROLLED={'isOpen' in props}\n          isOpen={props.isOpen}\n          onChange={props.onChange}\n          disabled={props.disabled}\n          defaultOpen={props.defaultOpen}\n        >\n          {props.children}\n        </HeadlessDisclosureRoot>\n      </Dynamic>\n    </DisclosureContext.Provider>\n  );\n}\n\nexport type DisclosureButtonProps<T extends ValidConstructor = 'button'> = {\n  as?: T;\n} & Omit<HeadlessDisclosureChildProps, 'CONTROLLED'>\n  & WithRef<T>\n  & Omit<ButtonProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function DisclosureButton<T extends ValidConstructor = 'button'>(\n  props: DisclosureButtonProps<T>,\n): JSX.Element {\n  const context = useDisclosureContext('DisclosureButton');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const toggle = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.setState(!properties.isOpen());\n        }\n      };\n\n      ref.addEventListener('click', toggle);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', toggle);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      {...omitProps(props, [\n        'children',\n        'ref',\n      ])}\n      id={context.buttonID}\n      aria-disabled={properties.disabled() || props.disabled}\n      aria-expanded={properties.isOpen()}\n      aria-controls={properties.isOpen() && context.panelID}\n      data-sh-expanded={properties.isOpen()}\n      data-sh-disabled={properties.disabled() || props.disabled}\n      disabled={properties.disabled() || props.disabled}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n      data-sh-disclosure-button={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type DisclosurePanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function DisclosurePanel<T extends ValidConstructor = 'div'>(\n  props: DisclosurePanelProps<T>,\n): JSX.Element {\n  const context = useDisclosureContext('DisclosurePanel');\n  const properties = useHeadlessDisclosureChild();\n  return (\n    <Show\n      when={props.unmount ?? true}\n      fallback={(\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'unmount',\n            'children',\n          ])}\n          id={context.panelID}\n          data-sh-disclosure-panel={context.ownerID}\n        >\n          <HeadlessDisclosureChild>\n            {props.children}\n          </HeadlessDisclosureChild>\n        </Dynamic>\n      )}\n    >\n      <Show when={properties.isOpen()}>\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'unmount',\n            'children',\n          ])}\n          id={context.panelID}\n          data-sh-disclosure-panel={context.ownerID}\n        >\n          <HeadlessDisclosureChild>\n            {props.children}\n          </HeadlessDisclosureChild>\n        </Dynamic>\n      </Show>\n    </Show>\n  );\n}\n", "import { JSX } from 'solid-js/jsx-runtime';\n\nexport interface FragmentProps {\n  children?: JSX.Element;\n}\n\nexport default function Fragment(props: FragmentProps): JSX.Element {\n  return props.children;\n}\n", "import {\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n} from 'solid-js';\nimport {\n  JSX,\n} from 'solid-js/jsx-runtime';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\n\nexport type ButtonProps<T extends ValidConstructor = 'button'> = {\n  as?: T,\n  disabled?: boolean;\n} & WithRef<T> & Omit<DynamicProps<T>, 'as' | 'disabled' | 'ref'>;\n\nexport function Button<T extends ValidConstructor = 'button'>(\n  props: ButtonProps<T>,\n): JSX.Element {\n  const buttonID = createUniqueId();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      // This behavior is redundant for buttons\n      if (ref.tagName !== 'BUTTON') {\n        const onKeyDown = (e: KeyboardEvent) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            ref.click();\n          }\n        };\n\n        ref.addEventListener('keydown', onKeyDown);\n        onCleanup(() => {\n          ref.removeEventListener('keydown', onKeyDown);\n        });\n      }\n    }\n  });\n\n  return (\n    <Dynamic\n      component={props.as ?? 'button'}\n      id={buttonID}\n      tabindex={0}\n      role=\"button\"\n      disabled={props.disabled}\n      {...omitProps(props, [\n        'as',\n        'disabled',\n        'ref',\n      ])}\n      aria-disabled={props.disabled}\n      data-sh-disabled={props.disabled}\n      data-sh-button={buttonID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    />\n  );\n}\n", "import {\n  createContext,\n  createUniqueId,\n  useContext,\n  Show,\n  createEffect,\n  onCleanup,\n  createSignal,\n} from 'solid-js';\nimport { JSX } from 'solid-js/jsx-runtime';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessSelectOption,\n  HeadlessSelectOptionChild,\n  HeadlessSelectOptionChildProps,\n  HeadlessSelectOptionProps,\n  HeadlessSelectRoot,\n  HeadlessSelectRootProps,\n  useHeadlessSelectOptionChild,\n} from '../headless/Select';\nimport {\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n  createRef,\n  DynamicNode,\n} from '../utils/dynamic-prop';\nimport {\n  queryAccordionButtons,\n} from '../utils/query-nodes';\nimport {\n  Button,\n  ButtonProps,\n} from './Button';\n\ninterface AccordionContext {\n  ownerID: string;\n  setChecked: (node: Element) => void;\n  setPrevChecked: (node: Element) => void;\n  setNextChecked: (node: Element) => void;\n  setFirstChecked: () => void;\n  setLastChecked: () => void;\n}\n\nconst AccordionContext = createContext<AccordionContext>();\n\nfunction useAccordionContext(componentName: string): AccordionContext {\n  const context = useContext(AccordionContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Accordion>`);\n}\n\ninterface AccordionItemContext {\n  buttonID: string;\n  panelID: string;\n}\n\nconst AccordionItemContext = createContext<AccordionItemContext>();\n\nfunction useAccordionItemContext(componentName: string): AccordionItemContext {\n  const context = useContext(AccordionItemContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <AccordionItem>`);\n}\n\nexport type AccordionProps<V, T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & Omit<HeadlessSelectRootProps<V>, 'CONTROLLED'>\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessSelectRootProps<V>>;\n\nexport function Accordion<V, T extends ValidConstructor = 'div'>(\n  props: AccordionProps<V, T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n\n  let internalRef: DynamicNode<T>;\n\n  function setChecked(node: Element) {\n    (node as HTMLElement).focus();\n  }\n\n  function setNextChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const radios = queryAccordionButtons(internalRef, ownerID);\n      for (let i = 0, len = radios.length; i < len; i += 1) {\n        if (node === radios[i]) {\n          if (i === len - 1) {\n            setChecked(radios[0]);\n          } else {\n            setChecked(radios[i + 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setPrevChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const radios = queryAccordionButtons(internalRef, ownerID);\n      for (let i = 0, len = radios.length; i < len; i += 1) {\n        if (node === radios[i]) {\n          if (i === 0) {\n            setChecked(radios[len - 1]);\n          } else {\n            setChecked(radios[i - 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setFirstChecked() {\n    if (internalRef instanceof HTMLElement) {\n      const radios = queryAccordionButtons(internalRef, ownerID);\n      setChecked(radios[0]);\n    }\n  }\n\n  function setLastChecked() {\n    if (internalRef instanceof HTMLElement) {\n      const radios = queryAccordionButtons(internalRef, ownerID);\n      setChecked(radios[radios.length - 1]);\n    }\n  }\n\n  return (\n    <AccordionContext.Provider\n      value={{\n        ownerID,\n        setChecked,\n        setNextChecked,\n        setPrevChecked,\n        setFirstChecked,\n        setLastChecked,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'as',\n          'children',\n          'disabled',\n          'defaultValue',\n          'onChange',\n          'multiple',\n          'toggleable',\n          'value',\n          'ref',\n        ])}\n        ref={createRef(props, (e) => {\n          internalRef = e;\n        })}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n        data-sh-accordion={ownerID}\n      >\n        <HeadlessSelectRoot\n          CONTROLLED={'value' in props}\n          multiple={props.multiple}\n          value={props.value}\n          defaultValue={props.defaultValue}\n          toggleable={props.toggleable}\n          disabled={props.disabled}\n          onChange={props.onChange}\n        >\n          {props.children}\n        </HeadlessSelectRoot>\n      </Dynamic>\n    </AccordionContext.Provider>\n  );\n}\n\nexport type AccordionItemProps<V, T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessSelectOptionProps<V>\n  & Omit<DynamicProps<T>, keyof HeadlessSelectOptionProps<V>>;\n\nexport function AccordionItem<V, T extends ValidConstructor = 'div'>(\n  props: AccordionItemProps<V, T>,\n): JSX.Element {\n  const buttonID = createUniqueId();\n  const panelID = createUniqueId();\n\n  return (\n    <AccordionItemContext.Provider\n      value={{\n        buttonID,\n        panelID,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'as',\n          'children',\n          'value',\n          'disabled',\n        ])}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n      >\n        <HeadlessSelectOption\n          value={props.value}\n          disabled={props.disabled}\n        >\n          {props.children}\n        </HeadlessSelectOption>\n      </Dynamic>\n    </AccordionItemContext.Provider>\n  );\n}\n\nexport type AccordionHeaderProps<T extends ValidConstructor = 'h3'> = {\n  as?: T;\n} & HeadlessSelectOptionChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessSelectOptionChildProps>;\n\nexport function AccordionHeader<T extends ValidConstructor = 'h3'>(\n  props: AccordionHeaderProps<T>,\n): JSX.Element {\n  return (\n    <Dynamic\n      component={props.as ?? 'h3'}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n    >\n      <HeadlessSelectOptionChild>\n        {props.children}\n      </HeadlessSelectOptionChild>\n    </Dynamic>\n  );\n}\n\nexport type AccordionButtonProps<T extends ValidConstructor = 'button'> = {\n  as?: T;\n} & HeadlessSelectOptionChildProps\n  & WithRef<T>\n  & Omit<ButtonProps<T>, keyof HeadlessSelectOptionChildProps>;\n\nexport function AccordionButton<T extends ValidConstructor = 'button'>(\n  props: AccordionButtonProps<T>,\n): JSX.Element {\n  const rootContext = useAccordionContext('AccordionButton');\n  const itemContext = useAccordionItemContext('AccordionButton');\n  const properties = useHeadlessSelectOptionChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (!(properties.disabled() || props.disabled)) {\n          switch (e.key) {\n            case 'ArrowUp':\n              e.preventDefault();\n              rootContext.setPrevChecked(ref);\n              break;\n            case 'ArrowDown':\n              e.preventDefault();\n              rootContext.setNextChecked(ref);\n              break;\n            case 'Home':\n              e.preventDefault();\n              rootContext.setFirstChecked();\n              break;\n            case 'End':\n              e.preventDefault();\n              rootContext.setLastChecked();\n              break;\n            default:\n              break;\n          }\n        }\n      };\n      const onClick = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.select();\n        }\n      };\n      const onFocus = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.focus();\n        }\n      };\n      const onBlur = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.blur();\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      ref.addEventListener('click', onClick);\n      ref.addEventListener('focus', onFocus);\n      ref.addEventListener('blur', onBlur);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n        ref.removeEventListener('click', onClick);\n        ref.removeEventListener('focus', onFocus);\n        ref.removeEventListener('blur', onBlur);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      {...omitProps(props, [\n        'children',\n        'ref',\n        'disabled',\n        'as',\n      ])}\n      id={itemContext.buttonID}\n      aria-expanded={properties.isSelected()}\n      aria-controls={properties.isSelected() && itemContext.panelID}\n      aria-disabled={properties.disabled() || props.disabled}\n      data-sh-disabled={properties.disabled() || props.disabled}\n      data-sh-expanded={properties.isSelected()}\n      data-sh-active={properties.isActive()}\n      disabled={properties.disabled() || props.disabled}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n      data-sh-accordion-button={rootContext.ownerID}\n    >\n      <HeadlessSelectOptionChild>\n        {props.children}\n      </HeadlessSelectOptionChild>\n    </Dynamic>\n  );\n}\n\nexport type AccordionPanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n} & HeadlessSelectOptionChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessSelectOptionChildProps>;\n\nexport function AccordionPanel<T extends ValidConstructor = 'div'>(\n  props: AccordionPanelProps<T>,\n): JSX.Element {\n  const context = useAccordionItemContext('AccordionPanel');\n  const properties = useHeadlessSelectOptionChild();\n\n  return (\n    <Show\n      when={props.unmount ?? true}\n      fallback={(\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'children',\n            'unmount',\n          ])}\n          id={context.panelID}\n          aria-labelledby={context.buttonID}\n        >\n          <HeadlessSelectOptionChild>\n            {props.children}\n          </HeadlessSelectOptionChild>\n        </Dynamic>\n      )}\n    >\n      <Show when={properties.isSelected()}>\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'children',\n            'unmount',\n          ])}\n          id={context.panelID}\n          aria-labelledby={context.buttonID}\n        >\n          <HeadlessSelectOptionChild>\n            {props.children}\n          </HeadlessSelectOptionChild>\n        </Dynamic>\n      </Show>\n    </Show>\n  );\n}\n", "export default function queryNodes<T extends Element>(\n  el: T,\n  tag: string,\n  ownerID: string,\n): NodeListOf<Element> {\n  return el.querySelectorAll(`[data-sh-${tag}=\"${ownerID}\"]`);\n}\n\nconst ACCORDION_BUTTON = 'accordion-button';\n\nexport function queryAccordionButtons<E extends Element>(\n  el: E,\n  ownerID: string,\n): NodeListOf<Element> {\n  return queryNodes(el, ACCORDION_BUTTON, ownerID);\n}\n\nconst LISTBOX_OPTION = 'listbox-option';\n\nexport function queryListboxOptions<E extends Element>(\n  el: E,\n  ownerID: string,\n): NodeListOf<Element> {\n  return queryNodes(el, LISTBOX_OPTION, ownerID);\n}\n\nconst MENU_ITEM = 'menu-item';\n\nexport function queryMenuItems<E extends Element>(\n  el: E,\n  ownerID: string,\n): NodeListOf<Element> {\n  return queryNodes(el, MENU_ITEM, ownerID);\n}\n\nconst RADIO = 'radio';\n\nexport function queryRadios<E extends Element>(\n  el: E,\n  ownerID: string,\n): NodeListOf<Element> {\n  return queryNodes(el, RADIO, ownerID);\n}\n\nconst SELECT_OPTION = 'select-option';\n\nexport function querySelectOptions<E extends Element>(\n  el: E,\n  ownerID: string,\n): NodeListOf<Element> {\n  return queryNodes(el, SELECT_OPTION, ownerID);\n}\n\nconst FEED_ARTICLE = 'feed-article';\n\nexport function queryFeedArticles<E extends Element>(\n  el: E,\n  ownerID: string,\n): NodeListOf<Element> {\n  return queryNodes(el, FEED_ARTICLE, ownerID);\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessSelectOption,\n  HeadlessSelectOptionProps,\n  HeadlessSelectRoot,\n  HeadlessSelectRootProps,\n  useHeadlessSelectChild,\n} from '../headless/Select';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport { queryRadios } from '../utils/query-nodes';\n\ninterface RadioGroupContext {\n  labelID: string;\n  descriptionID: string;\n}\n\nconst RadioGroupContext = createContext<RadioGroupContext>();\n\nfunction useRadioGroupContext(componentName: string): RadioGroupContext {\n  const context = useContext(RadioGroupContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <RadioGroup> or <RadioGroupOption>`);\n}\n\ninterface RadioGroupRootContext {\n  ownerID: string;\n  setChecked: (node: Element) => void;\n  setPrevChecked: (node: Element) => void;\n  setNextChecked: (node: Element) => void;\n}\n\nconst RadioGroupRootContext = createContext<RadioGroupRootContext>();\n\nfunction useRadioGroupRootContext(componentName: string): RadioGroupRootContext {\n  const context = useContext(RadioGroupRootContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <RadioGroup>`);\n}\n\nexport type RadioGroupProps<V, T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & Omit<HeadlessSelectRootProps<V>, 'multiple' | 'toggleable' | 'CONTROLLED'>\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessSelectRootProps<V>>;\n\nexport function RadioGroup<V, T extends ValidConstructor = 'div'>(\n  props: RadioGroupProps<V, T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const descriptionID = createUniqueId();\n  const labelID = createUniqueId();\n\n  let internalRef: DynamicNode<T>;\n\n  function setChecked(node: Element) {\n    (node as HTMLElement).focus();\n  }\n\n  function setNextChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const radios = queryRadios(internalRef, ownerID);\n      for (let i = 0, len = radios.length; i < len; i += 1) {\n        if (node === radios[i]) {\n          if (i === len - 1) {\n            setChecked(radios[0]);\n          } else {\n            setChecked(radios[i + 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setPrevChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const radios = queryRadios(internalRef, ownerID);\n      for (let i = 0, len = radios.length; i < len; i += 1) {\n        if (node === radios[i]) {\n          if (i === 0) {\n            setChecked(radios[len - 1]);\n          } else {\n            setChecked(radios[i - 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n    <RadioGroupRootContext.Provider\n      value={{\n        ownerID,\n        setChecked,\n        setNextChecked,\n        setPrevChecked,\n      }}\n    >\n      <RadioGroupContext.Provider\n        value={{\n          descriptionID,\n          labelID,\n        }}\n      >\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'children',\n            'value',\n            'disabled',\n            'onChange',\n            'ref',\n            'defaultValue',\n          ])}\n          role=\"radiogroup\"\n          aria-labelledby={labelID}\n          aria-describedby={descriptionID}\n          aria-disabled={props.disabled}\n          data-sh-disabled={props.disabled}\n          disabled={props.disabled}\n          ref={createRef(props, (e) => {\n            internalRef = e;\n          })}\n          data-sh-radiogroup={ownerID}\n        >\n          <HeadlessSelectRoot\n            CONTROLLED={'value' in props}\n            defaultValue={props.defaultValue}\n            value={props.value}\n            disabled={props.disabled}\n            onChange={props.onChange}\n          >\n            {props.children}\n          </HeadlessSelectRoot>\n        </Dynamic>\n      </RadioGroupContext.Provider>\n    </RadioGroupRootContext.Provider>\n  );\n}\n\nexport type RadioGroupOptionProps<V, T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & Omit<HeadlessSelectOptionProps<V>, 'multiple'>\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessSelectOptionProps<V>>;\n\nexport function RadioGroupOption<V, T extends ValidConstructor = 'div'>(\n  props: RadioGroupOptionProps<V, T>,\n): JSX.Element {\n  const context = useRadioGroupRootContext('RadioGroupOption');\n  const properties = useHeadlessSelectChild<V>();\n\n  const descriptionID = createUniqueId();\n  const labelID = createUniqueId();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (!(properties.disabled() || props.disabled)) {\n          switch (e.key) {\n            case 'ArrowLeft':\n            case 'ArrowUp':\n              e.preventDefault();\n              context.setPrevChecked(ref);\n              break;\n            case 'ArrowRight':\n            case 'ArrowDown':\n              e.preventDefault();\n              context.setNextChecked(ref);\n              break;\n            case ' ':\n            case 'Enter':\n              if (ref.tagName === 'BUTTON') {\n                e.preventDefault();\n              }\n              context.setChecked(ref);\n              break;\n            default:\n              break;\n          }\n        }\n      };\n      const onClick = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.select(props.value);\n        }\n      };\n      const onFocus = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.focus(props.value);\n          properties.select(props.value);\n        }\n      };\n      const onBlur = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.blur();\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      ref.addEventListener('click', onClick);\n      ref.addEventListener('focus', onFocus);\n      ref.addEventListener('blur', onBlur);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n        ref.removeEventListener('click', onClick);\n        ref.removeEventListener('focus', onFocus);\n        ref.removeEventListener('blur', onBlur);\n      });\n    }\n  });\n\n  return (\n    <RadioGroupContext.Provider\n      value={{\n        descriptionID,\n        labelID,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'as',\n          'children',\n          'value',\n          'disabled',\n          'ref',\n        ])}\n        ref={createRef(props, (e) => {\n          setInternalRef(() => e);\n        })}\n        role=\"radio\"\n        disabled={props.disabled}\n        tabindex={properties.isSelected(props.value) ? 0 : -1}\n        aria-disabled={props.disabled}\n        aria-checked={properties.isSelected(props.value)}\n        aria-labelledby={labelID}\n        aria-describedby={descriptionID}\n        data-sh-radio={context.ownerID}\n        data-sh-checked={properties.isSelected(props.value)}\n        data-sh-disabled={props.disabled}\n      >\n        <HeadlessSelectOption\n          value={props.value}\n          disabled={props.disabled}\n        >\n          {props.children}\n        </HeadlessSelectOption>\n      </Dynamic>\n    </RadioGroupContext.Provider>\n  );\n}\n\nexport type RadioGroupLabelProps<T extends ValidConstructor = 'label'> = {\n  as?: T;\n} & Omit<DynamicProps<T>, 'as'>;\n\nexport function RadioGroupLabel<T extends ValidConstructor = 'label'>(\n  props: RadioGroupLabelProps<T>,\n): JSX.Element {\n  const context = useRadioGroupContext('RadioGroupLabel');\n  return (\n    <Dynamic\n      component={props.as ?? 'label'}\n      {...omitProps(props, [\n        'as',\n      ])}\n      id={context.labelID}\n    >\n      {props.children}\n    </Dynamic>\n  );\n}\n\nexport type RadioGroupDescriptionProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & Omit<DynamicProps<T>, 'as'>;\n\nexport function RadioGroupDescription<T extends ValidConstructor = 'div'>(\n  props: RadioGroupDescriptionProps<T>,\n): JSX.Element {\n  const context = useRadioGroupContext('RadioGroupLabel');\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      {...omitProps(props, [\n        'as',\n      ])}\n      id={context.descriptionID}\n    >\n      {props.children}\n    </Dynamic>\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  untrack,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport { Dynamic } from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessSelectChild,\n  HeadlessSelectChildProps,\n  HeadlessSelectOption,\n  HeadlessSelectOptionProps,\n  HeadlessSelectRoot,\n  HeadlessSelectRootProps,\n  useHeadlessSelectChild,\n} from '../headless/Select';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport Fragment from '../utils/Fragment';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  Button,\n  ButtonProps,\n} from './Button';\nimport { queryListboxOptions } from '../utils/query-nodes';\n\ninterface ListboxContext {\n  horizontal?: boolean;\n  multiple?: boolean;\n  ownerID: string;\n  labelID: string;\n  buttonID: string;\n  optionsID: string;\n  hovering: boolean;\n  anchor?: HTMLElement | null;\n}\n\nconst ListboxContext = createContext<ListboxContext>();\n\nfunction useListboxContext(componentName: string): ListboxContext {\n  const context = useContext(ListboxContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Listbox>`);\n}\n\ninterface ListboxOptionsContext {\n  setChecked: (node: Element) => void;\n  setPrevChecked: (node: Element) => void;\n  setNextChecked: (node: Element) => void;\n  setFirstChecked: () => void;\n  setLastChecked: () => void;\n  setFirstMatch: (character: string) => void;\n}\n\nconst ListboxOptionsContext = createContext<ListboxOptionsContext>();\n\nfunction useListboxOptionsContext(componentName: string): ListboxOptionsContext {\n  const context = useContext(ListboxOptionsContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <ListboxOptions>`);\n}\n\ninterface ListboxMultipleProps<V> {\n  multiple: true;\n  onSelectChange?: (value: V[]) => void;\n}\n\ninterface ListboxSingleProps<V> {\n  multiple?: false;\n  onSelectChange?: (value?: V) => void;\n}\n\ntype ListboxBaseProps<V> =\n  | ListboxMultipleProps<V>\n  | ListboxSingleProps<V>;\n\nexport type ListboxProps<V, T extends ValidConstructor = typeof Fragment> = {\n  as?: T;\n  horizontal?: boolean;\n  onDisclosureChange?: (value: boolean) => void;\n} & ListboxBaseProps<V>\n  & Omit<HeadlessSelectRootProps<V>, 'multiple' | 'children' | 'onChange' | 'CONTROLLED'>\n  & Omit<HeadlessDisclosureRootProps, 'onChange' | 'CONTROLLED'>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps | keyof HeadlessSelectRootProps<V>>;\n\nexport function Listbox<V, T extends ValidConstructor = typeof Fragment>(\n  props: ListboxProps<V, T>,\n): JSX.Element {\n  const [hovering, setHovering] = createSignal(false);\n  const ownerID = createUniqueId();\n  const labelID = createUniqueId();\n  const buttonID = createUniqueId();\n  const optionsID = createUniqueId();\n\n  return (\n    <ListboxContext.Provider\n      value={{\n        horizontal: props.horizontal,\n        multiple: props.multiple,\n        ownerID,\n        labelID,\n        buttonID,\n        optionsID,\n        get hovering() {\n          return hovering();\n        },\n        set hovering(value: boolean) {\n          setHovering(value);\n        },\n      }}\n    >\n      <Dynamic\n        component={props.as ?? Fragment}\n        {...omitProps(props, [\n          'as',\n          'children',\n          'defaultOpen',\n          'disabled',\n          'horizontal',\n          'isOpen',\n          'multiple',\n          'onDisclosureChange',\n          'onSelectChange',\n          'toggleable',\n          'value',\n          'defaultValue',\n        ])}\n        aria-labelledby={labelID}\n        data-sh-listbox={ownerID}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n      >\n        <HeadlessSelectRoot<V>\n          CONTROLLED={'value' in props}\n          multiple={props.multiple}\n          toggleable={props.toggleable}\n          defaultValue={props.defaultValue}\n          value={props.value}\n          disabled={props.disabled}\n          onChange={props.onSelectChange}\n        >\n          <HeadlessDisclosureRoot\n            CONTROLLED={'isOpen' in props}\n            isOpen={props.isOpen}\n            defaultOpen={props.defaultOpen}\n            disabled={props.disabled}\n            onChange={props.onDisclosureChange}\n          >\n            {props.children}\n          </HeadlessDisclosureRoot>\n        </HeadlessSelectRoot>\n      </Dynamic>\n    </ListboxContext.Provider>\n  );\n}\n\nexport type ListboxLabelProps<T extends ValidConstructor = 'label'> = {\n  as?: T;\n}\n  & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function ListboxLabel<T extends ValidConstructor = 'label'>(\n  props: ListboxLabelProps<T>,\n): JSX.Element {\n  const context = useListboxContext('ListboxLabel');\n\n  return (\n    <Dynamic\n      component={props.as ?? 'label'}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.labelID}\n      data-sh-listbox-label={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type ListboxButtonProps<T extends ValidConstructor = 'button'> = {\n  as?: T;\n}\n  & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function ListboxButton<T extends ValidConstructor = 'button'>(\n  props: ListboxButtonProps<T>,\n): JSX.Element {\n  const context = useListboxContext('ListboxButton');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const toggle = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.setState(!properties.isOpen());\n        }\n      };\n\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (!(properties.disabled() || props.disabled)) {\n          switch (e.key) {\n            case 'ArrowUp':\n            case 'ArrowDown':\n              e.preventDefault();\n              toggle();\n              break;\n            default:\n              break;\n          }\n        }\n      };\n\n      ref.addEventListener('click', toggle);\n      ref.addEventListener('keydown', onKeyDown);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', toggle);\n        ref.removeEventListener('keydown', onKeyDown);\n      });\n\n      const onMouseEnter = () => {\n        context.hovering = true;\n      };\n      const onMouseLeave = () => {\n        context.hovering = false;\n      };\n\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      onCleanup(() => {\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      {...omitProps(props, [\n        'children',\n        'ref',\n      ])}\n      id={context.buttonID}\n      aria-haspopup=\"listbox\"\n      aria-expanded={properties.isOpen()}\n      aria-controls={context.optionsID}\n      aria-disabled={properties.disabled() || props.disabled}\n      data-sh-expanded={properties.isOpen()}\n      data-sh-disabled={properties.disabled() || props.disabled}\n      disabled={properties.disabled() || props.disabled}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n        if (e instanceof HTMLElement) {\n          context.anchor = e;\n        }\n      })}\n      data-sh-listbox-button={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type ListboxOptionsProps<V, T extends ValidConstructor = 'ul'> = {\n  as?: T;\n}\n  & HeadlessSelectChildProps<V>\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessSelectChildProps<V>>;\n\nexport function ListboxOptions<V, T extends ValidConstructor = 'ul'>(\n  props: ListboxOptionsProps<V, T>,\n): JSX.Element {\n  const context = useListboxContext('ListboxOptions');\n  const selectProperties = useHeadlessSelectChild();\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  function setChecked(node: Element) {\n    (node as HTMLElement).focus();\n  }\n\n  function setNextChecked(node: Element) {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const options = queryListboxOptions(ref, context.ownerID);\n      for (let i = 0, len = options.length; i < len; i += 1) {\n        if (node === options[i]) {\n          if (i === len - 1) {\n            setChecked(options[0]);\n          } else {\n            setChecked(options[i + 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setPrevChecked(node: Element) {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const options = queryListboxOptions(ref, context.ownerID);\n      for (let i = 0, len = options.length; i < len; i += 1) {\n        if (node === options[i]) {\n          if (i === 0) {\n            setChecked(options[len - 1]);\n          } else {\n            setChecked(options[i - 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setFirstChecked() {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const options = queryListboxOptions(ref, context.ownerID);\n      setChecked(options[0]);\n    }\n  }\n\n  function setLastChecked() {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const options = queryListboxOptions(ref, context.ownerID);\n      setChecked(options[options.length - 1]);\n    }\n  }\n\n  function setFirstMatch(character: string) {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const options = queryListboxOptions(ref, context.ownerID);\n      const lower = character.toLowerCase();\n      for (let i = 0, l = options.length; i < l; i += 1) {\n        if (options[i].textContent?.toLowerCase().startsWith(lower)) {\n          setChecked(options[i]);\n          return;\n        }\n      }\n    }\n  }\n\n  createEffect(() => {\n    if (!selectProperties.hasSelected()) {\n      setFirstChecked();\n    }\n  });\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onBlur = (e: FocusEvent) => {\n        if (context.hovering) {\n          return;\n        }\n        if (!e.relatedTarget || !ref.contains(e.relatedTarget as Node)) {\n          properties.setState(false);\n        }\n      };\n      ref.addEventListener('focusout', onBlur);\n      onCleanup(() => {\n        ref.removeEventListener('focusout', onBlur);\n      });\n    }\n  });\n\n  return (\n    <ListboxOptionsContext.Provider\n      value={{\n        setChecked,\n        setFirstChecked,\n        setLastChecked,\n        setNextChecked,\n        setPrevChecked,\n        setFirstMatch,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'ul'}\n        {...omitProps(props, [\n          'as',\n          'children',\n          'ref',\n        ])}\n        id={context.optionsID}\n        role=\"listbox\"\n        disabled={properties.disabled() || props.disabled}\n        aria-disabled={properties.disabled() || props.disabled}\n        aria-multiselectable={context.multiple}\n        aria-labelledby={context.buttonID}\n        aria-orientation={context.horizontal ? 'horizontal' : 'vertical'}\n        data-sh-listbox-options={context.ownerID}\n        data-sh-disabled={properties.disabled() || props.disabled}\n        tabindex={0}\n        ref={createRef(props, (e) => {\n          setInternalRef(() => e);\n        })}\n      >\n        <HeadlessSelectChild>\n          {props.children}\n        </HeadlessSelectChild>\n      </Dynamic>\n    </ListboxOptionsContext.Provider>\n  );\n}\n\nexport type ListboxOptionProps<V, T extends ValidConstructor = 'li'> = {\n  as?: T;\n}\n  & HeadlessSelectOptionProps<V>\n  & WithRef<T>\n  & Omit<ButtonProps<T>, keyof HeadlessSelectOptionProps<V>>;\n\nexport function ListboxOption<V, T extends ValidConstructor = 'li'>(\n  props: ListboxOptionProps<V, T>,\n): JSX.Element {\n  const rootContext = useListboxContext('ListboxOptions');\n  const context = useListboxOptionsContext('ListboxOptions');\n  const disclosure = useHeadlessDisclosureChild();\n  const properties = useHeadlessSelectChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  let characters = '';\n  let timeout: ReturnType<typeof setTimeout> | undefined;\n\n  onCleanup(() => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n  });\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (!(properties.disabled() || props.disabled)) {\n          switch (e.key) {\n            case 'ArrowLeft':\n              if (rootContext.horizontal) {\n                e.preventDefault();\n                context.setPrevChecked(ref);\n              }\n              break;\n            case 'ArrowUp':\n              if (!rootContext.horizontal) {\n                e.preventDefault();\n                context.setPrevChecked(ref);\n              }\n              break;\n            case 'ArrowRight':\n              if (rootContext.horizontal) {\n                e.preventDefault();\n                context.setNextChecked(ref);\n              }\n              break;\n            case 'ArrowDown':\n              if (!rootContext.horizontal) {\n                e.preventDefault();\n                context.setNextChecked(ref);\n              }\n              break;\n            case ' ':\n            case 'Enter':\n              if (ref.tagName === 'BUTTON') {\n                e.preventDefault();\n              }\n              properties.select(props.value);\n              if (!rootContext.multiple) {\n                disclosure.setState(false);\n              }\n              break;\n            case 'Home':\n              e.preventDefault();\n              context.setFirstChecked();\n              break;\n            case 'End':\n              e.preventDefault();\n              context.setLastChecked();\n              break;\n            default:\n              if (e.key.length === 1) {\n                characters = `${characters}${e.key}`;\n                if (timeout) {\n                  clearTimeout(timeout);\n                }\n                timeout = setTimeout(() => {\n                  context.setFirstMatch(characters);\n                  characters = '';\n                }, 100);\n              }\n              break;\n          }\n        }\n      };\n      const onClick = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.select(props.value);\n          if (!rootContext.multiple) {\n            disclosure.setState(false);\n          }\n        }\n      };\n      const onFocus = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.focus(props.value);\n        }\n      };\n      const onBlur = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.blur();\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      ref.addEventListener('click', onClick);\n      ref.addEventListener('focus', onFocus);\n      ref.addEventListener('blur', onBlur);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n        ref.removeEventListener('click', onClick);\n        ref.removeEventListener('focus', onFocus);\n        ref.removeEventListener('blur', onBlur);\n      });\n    }\n  });\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      if (disclosure.isOpen()\n        && untrack(() => properties.isSelected(props.value))\n        && !(properties.disabled() || props.disabled)\n      ) {\n        ref.focus();\n      }\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      as={props.as ?? 'li'}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'value',\n        'ref',\n      ])}\n      disabled={props.disabled}\n      role=\"option\"\n      aria-disabled={props.disabled}\n      aria-selected={properties.isSelected(props.value)}\n      tabindex={-1}\n      data-sh-listbox-option={rootContext.ownerID}\n      data-sh-disabled={props.disabled}\n      data-sh-selected={properties.isSelected(props.value)}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessSelectOption\n        value={props.value}\n        disabled={props.disabled}\n      >\n        {props.children}\n      </HeadlessSelectOption>\n    </Dynamic>\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createUniqueId,\n  useContext,\n  Show,\n  onCleanup,\n  createSignal,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport getFocusableElements from '../utils/get-focusable-elements';\n\ninterface DialogContext {\n  ownerID: string;\n  panelID: string;\n  titleID: string;\n  descriptionID: string;\n}\n\nconst DialogContext = createContext<DialogContext>();\n\nfunction useDialogContext(componentName: string): DialogContext {\n  const context = useContext(DialogContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Dialog>`);\n}\n\nexport type DialogProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n} & HeadlessDisclosureRootProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps | 'unmount'>;\n\nexport function Dialog<T extends ValidConstructor = 'div'>(\n  props: DialogProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const panelID = createUniqueId();\n  const titleID = createUniqueId();\n  const descriptionID = createUniqueId();\n\n  let returnElement: HTMLElement | null = null;\n  if (typeof document !== 'undefined') {\n    returnElement = document.activeElement as HTMLElement | null;\n  }\n\n  onCleanup(() => {\n    returnElement?.focus();\n  });\n\n  return (\n    <DialogContext.Provider\n      value={{\n        ownerID,\n        panelID,\n        titleID,\n        descriptionID,\n      }}\n    >\n      <HeadlessDisclosureRoot\n        CONTROLLED={'isOpen' in props}\n        isOpen={props.isOpen}\n        onChange={(value) => {\n          props.onChange?.(value);\n          if (!value) {\n            props.onClose?.();\n            returnElement?.focus();\n          } else {\n            returnElement = document.activeElement as HTMLElement | null;\n            props.onOpen?.();\n          }\n        }}\n        defaultOpen={props.defaultOpen}\n        disabled={props.disabled}\n      >\n        {({ isOpen }) => (\n          <Show\n            when={props.unmount ?? true}\n            fallback={(\n              <Dynamic\n                component={props.as ?? 'div'}\n                {...omitProps(props, [\n                  'as',\n                  'children',\n                  'defaultOpen',\n                  'unmount',\n                  'isOpen',\n                  'disabled',\n                  'onClose',\n                  'onChange',\n                ])}\n                id={ownerID}\n                role=\"dialog\"\n                aria-modal\n                aria-labelledby={titleID}\n                aria-describedby={descriptionID}\n                data-sh-dialog={ownerID}\n              >\n                <HeadlessDisclosureChild>\n                  {props.children}\n                </HeadlessDisclosureChild>\n              </Dynamic>\n            )}\n          >\n            <Show when={isOpen()}>\n              <Dynamic\n                component={props.as ?? 'div'}\n                {...omitProps(props, [\n                  'as',\n                  'children',\n                  'defaultOpen',\n                  'unmount',\n                  'isOpen',\n                  'disabled',\n                  'onClose',\n                  'onChange',\n                ])}\n                id={ownerID}\n                role=\"dialog\"\n                aria-modal\n                aria-labelledby={titleID}\n                aria-describedby={descriptionID}\n                data-sh-dialog={ownerID}\n              >\n                <HeadlessDisclosureChild>\n                  {props.children}\n                </HeadlessDisclosureChild>\n              </Dynamic>\n            </Show>\n          </Show>\n        )}\n      </HeadlessDisclosureRoot>\n    </DialogContext.Provider>\n  );\n}\n\nexport type DialogTitleProps<T extends ValidConstructor = 'h2'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function DialogTitle<T extends ValidConstructor = 'h2'>(\n  props: DialogTitleProps<T>,\n): JSX.Element {\n  const context = useDialogContext('DialogTitle');\n  return (\n    <Dynamic\n      component={(props.as ?? 'h2') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.titleID}\n      data-sh-dialog-title={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type DialogPanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function DialogPanel<T extends ValidConstructor = 'div'>(\n  props: DialogPanelProps<T>,\n): JSX.Element {\n  const context = useDialogContext('DialogPanel');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      if (properties.isOpen()) {\n        const initialNodes = getFocusableElements(ref);\n        if (initialNodes.length) {\n          initialNodes[0].focus();\n        }\n\n        const onKeyDown = (e: KeyboardEvent) => {\n          if (!props.disabled) {\n            if (e.key === 'Tab') {\n              e.preventDefault();\n\n              const nodes = getFocusableElements(ref);\n              if (e.shiftKey) {\n                if (!document.activeElement || !ref.contains(document.activeElement)) {\n                  nodes[nodes.length - 1].focus();\n                } else {\n                  for (let i = 0, len = nodes.length; i < len; i += 1) {\n                    if (document.activeElement === nodes[i]) {\n                      if (i === 0) {\n                        nodes[len - 1].focus();\n                      } else {\n                        nodes[i - 1].focus();\n                      }\n                      break;\n                    }\n                  }\n                }\n              } else if (!document.activeElement || !ref.contains(document.activeElement)) {\n                nodes[0].focus();\n              } else {\n                for (let i = 0, len = nodes.length; i < len; i += 1) {\n                  if (document.activeElement === nodes[i]) {\n                    if (i === len - 1) {\n                      nodes[0].focus();\n                    } else {\n                      nodes[i + 1].focus();\n                    }\n                    break;\n                  }\n                }\n              }\n            } else if (e.key === 'Escape') {\n              properties.setState(false);\n            }\n          }\n        };\n\n        ref.addEventListener('keydown', onKeyDown);\n        onCleanup(() => {\n          ref.removeEventListener('keydown', onKeyDown);\n        });\n      }\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      id={context.panelID}\n      data-sh-dialog-panel={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type DialogOverlayProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function DialogOverlay<T extends ValidConstructor = 'p'>(\n  props: DialogOverlayProps<T>,\n): JSX.Element {\n  const context = useDialogContext('DialogOverlay');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const onClick = () => {\n        properties.setState(false);\n      };\n\n      ref.addEventListener('click', onClick);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', onClick);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      data-sh-dialog-overlay={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type DialogDescriptionProps<T extends ValidConstructor = 'p'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function DialogDescription<T extends ValidConstructor = 'p'>(\n  props: DialogDescriptionProps<T>,\n): JSX.Element {\n  const context = useDialogContext('DialogDescription');\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'p') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.descriptionID}\n      data-sh-dialog-description={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n", "export default function getFocusableElements(\n  node: HTMLElement,\n  filter?: HTMLElement,\n): HTMLElement[] {\n  const nodes = node.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n  );\n  const replicated: Element[] = [];\n\n  for (let i = 0, len = nodes.length; i < len; i += 1) {\n    if (!filter || !filter.contains(nodes[i])) {\n      replicated.push(nodes[i]);\n    }\n  }\n\n  return replicated as HTMLElement[];\n}\n", "import {\n  createEffect,\n  createSignal,\n  createUniqueId,\n  JSX,\n  onCleanup,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport getFocusableElements from '../utils/get-focusable-elements';\n\nexport type ToolbarProps<T extends ValidConstructor = 'div'> = {\n  as?: T,\n  horizontal?: boolean;\n} & Omit<DynamicProps<T>, 'as'> & WithRef<T>;\n\nexport function Toolbar<T extends ValidConstructor = 'div'>(\n  props: ToolbarProps<T>,\n): JSX.Element {\n  const toolbarID = createUniqueId();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n  let focusedElement: HTMLElement | undefined;\n\n  function getNextFocusable(): void {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const nodes = getFocusableElements(ref);\n      if (document.activeElement\n        && ref.contains(document.activeElement)\n      ) {\n        for (let i = 0, len = nodes.length; i < len; i += 1) {\n          if (document.activeElement === nodes[i]) {\n            if (i === len - 1) {\n              nodes[0].focus();\n            } else {\n              nodes[i + 1].focus();\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  function getPrevFocusable(): void {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const nodes = getFocusableElements(ref);\n      if (document.activeElement\n        && ref.contains(document.activeElement)\n      ) {\n        for (let i = 0, len = nodes.length; i < len; i += 1) {\n          if (document.activeElement === nodes[i]) {\n            if (i === 0) {\n              nodes[len - 1].focus();\n            } else {\n              nodes[i - 1].focus();\n            }\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        switch (e.key) {\n          case 'ArrowLeft':\n            if (props.horizontal) {\n              e.preventDefault();\n              getPrevFocusable();\n            }\n            break;\n          case 'ArrowUp':\n            if (!props.horizontal) {\n              e.preventDefault();\n              getPrevFocusable();\n            }\n            break;\n          case 'ArrowRight':\n            if (props.horizontal) {\n              e.preventDefault();\n              getNextFocusable();\n            }\n            break;\n          case 'ArrowDown':\n            if (!props.horizontal) {\n              e.preventDefault();\n              getNextFocusable();\n            }\n            break;\n          case 'Home': {\n            const nodes = getFocusableElements(ref);\n            if (nodes.length) {\n              e.preventDefault();\n              nodes[0].focus();\n            }\n          }\n            break;\n          case 'End': {\n            const nodes = getFocusableElements(ref);\n            if (nodes.length) {\n              e.preventDefault();\n              nodes[nodes.length - 1].focus();\n            }\n          }\n            break;\n          default:\n            break;\n        }\n      };\n\n      const onFocus = () => {\n        if (focusedElement) {\n          focusedElement.focus();\n        } else {\n          const nodes = getFocusableElements(ref);\n          if (nodes.length) {\n            nodes[0].focus();\n          }\n        }\n      };\n\n      const onFocusIn = (e: FocusEvent) => {\n        if (e.target && e.target !== ref) {\n          focusedElement = e.target as HTMLElement;\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      ref.addEventListener('focus', onFocus);\n      ref.addEventListener('focusin', onFocusIn);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n        ref.removeEventListener('focus', onFocus);\n        ref.removeEventListener('focusin', onFocusIn);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      {...omitProps(props, [\n        'as',\n        'horizontal',\n        'ref',\n      ])}\n      role=\"toolbar\"\n      id={toolbarID}\n      aria-orientation={(props.horizontal ?? true) ? 'horizontal' : 'vertical'}\n      tabindex={0}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n      data-sh-toolbar={toolbarID}\n    />\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport { Dynamic } from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessSelectOption,\n  HeadlessSelectOptionProps,\n  HeadlessSelectRoot,\n  HeadlessSelectRootProps,\n  useHeadlessSelectChild,\n} from '../headless/Select';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport {\n  querySelectOptions,\n} from '../utils/query-nodes';\nimport {\n  Button,\n  ButtonProps,\n} from './Button';\n\ninterface SelectContext {\n  ownerID: string;\n  horizontal: boolean;\n  setChecked: (node: Element) => void;\n  setPrevChecked: (node: Element) => void;\n  setNextChecked: (node: Element) => void;\n  setFirstChecked: () => void;\n  setLastChecked: () => void;\n  setFirstMatch: (character: string) => void;\n}\n\nconst SelectContext = createContext<SelectContext>();\n\nfunction useSelectContext(componentName: string): SelectContext {\n  const context = useContext(SelectContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Select>`);\n}\n\nexport type SelectProps<V, T extends ValidConstructor = 'ul'> = {\n  as?: T;\n  horizontal?: boolean;\n}\n  & Omit<HeadlessSelectRootProps<V>, 'CONTROLLED'>\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessSelectRootProps<V>>;\n\nexport function Select<V, T extends ValidConstructor = 'ul'>(\n  props: SelectProps<V, T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n\n  let internalRef: DynamicNode<T>;\n\n  function setChecked(node: Element) {\n    (node as HTMLElement).focus();\n  }\n\n  function setNextChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const options = querySelectOptions(internalRef, ownerID);\n      for (let i = 0, len = options.length; i < len; i += 1) {\n        if (node === options[i]) {\n          if (i === len - 1) {\n            setChecked(options[0]);\n          } else {\n            setChecked(options[i + 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setPrevChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const options = querySelectOptions(internalRef, ownerID);\n      for (let i = 0, len = options.length; i < len; i += 1) {\n        if (node === options[i]) {\n          if (i === 0) {\n            setChecked(options[len - 1]);\n          } else {\n            setChecked(options[i - 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setFirstChecked() {\n    if (internalRef instanceof HTMLElement) {\n      const options = querySelectOptions(internalRef, ownerID);\n      setChecked(options[0]);\n    }\n  }\n\n  function setLastChecked() {\n    if (internalRef instanceof HTMLElement) {\n      const options = querySelectOptions(internalRef, ownerID);\n      setChecked(options[options.length - 1]);\n    }\n  }\n\n  function setFirstMatch(character: string) {\n    if (internalRef instanceof HTMLElement) {\n      const lower = character.toLowerCase();\n      const options = querySelectOptions(internalRef, ownerID);\n      for (let i = 0, l = options.length; i < l; i += 1) {\n        if (options[i].textContent?.toLowerCase().startsWith(lower)) {\n          setChecked(options[i]);\n          return;\n        }\n      }\n    }\n  }\n\n  return (\n    <SelectContext.Provider\n      value={{\n        horizontal: !!props.horizontal,\n        ownerID,\n        setChecked,\n        setFirstChecked,\n        setLastChecked,\n        setNextChecked,\n        setPrevChecked,\n        setFirstMatch,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'ul'}\n        {...omitProps(props, [\n          'as',\n          'children',\n          'toggleable',\n          'value',\n          'onChange',\n          'multiple',\n          'horizontal',\n          'disabled',\n          'ref',\n          'defaultValue',\n        ])}\n        id={ownerID}\n        role=\"listbox\"\n        disabled={props.disabled}\n        aria-multiselectable={props.multiple}\n        aria-orientation={props.horizontal ? 'horizontal' : 'vertical'}\n        aria-disabled={props.disabled}\n        data-sh-select={ownerID}\n        data-sh-disabled={props.disabled}\n        ref={createRef(props, (e) => {\n          internalRef = e;\n        })}\n      >\n        <HeadlessSelectRoot\n          CONTROLLED={'value' in props}\n          multiple={props.multiple}\n          toggleable={props.toggleable}\n          defaultValue={props.defaultValue}\n          value={props.value}\n          onChange={props.onChange}\n          disabled={props.disabled}\n        >\n          {props.children}\n        </HeadlessSelectRoot>\n      </Dynamic>\n    </SelectContext.Provider>\n  );\n}\n\nexport type SelectOptionProps<V, T extends ValidConstructor = 'li'> = {\n  as?: T;\n}\n  & HeadlessSelectOptionProps<V>\n  & WithRef<T>\n  & Omit<ButtonProps<T>, keyof HeadlessSelectOptionProps<V>>;\n\nexport function SelectOption<V, T extends ValidConstructor = 'li'>(\n  props: SelectOptionProps<V, T>,\n): JSX.Element {\n  const context = useSelectContext('Select');\n  const properties = useHeadlessSelectChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  let characters = '';\n  let timeout: ReturnType<typeof setTimeout> | undefined;\n\n  onCleanup(() => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n  });\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (!(properties.disabled() || props.disabled)) {\n          switch (e.key) {\n            case 'ArrowUp':\n              if (!context.horizontal) {\n                e.preventDefault();\n                context.setPrevChecked(ref);\n              }\n              break;\n            case 'ArrowLeft':\n              if (context.horizontal) {\n                e.preventDefault();\n                context.setPrevChecked(ref);\n              }\n              break;\n            case 'ArrowDown':\n              if (!context.horizontal) {\n              e.preventDefault();\n                context.setNextChecked(ref);\n              }\n              break;\n            case 'ArrowRight':\n              if (context.horizontal) {\n                e.preventDefault();\n                context.setNextChecked(ref);\n              }\n              break;\n            case ' ':\n            case 'Enter':\n              if (ref.tagName === 'BUTTON') {\n                e.preventDefault();\n              }\n              properties.select(props.value);\n              break;\n            case 'Home':\n              e.preventDefault();\n              context.setFirstChecked();\n              break;\n            case 'End':\n              e.preventDefault();\n              context.setLastChecked();\n              break;\n            default:\n              if (e.key.length === 1) {\n                characters = `${characters}${e.key}`;\n                if (timeout) {\n                  clearTimeout(timeout);\n                }\n                timeout = setTimeout(() => {\n                  context.setFirstMatch(characters);\n                  characters = '';\n                }, 100);\n              }\n              break;\n          }\n        }\n      };\n      const onClick = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.select(props.value);\n        }\n      };\n      const onFocus = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.focus(props.value);\n        }\n      };\n      const onBlur = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.blur();\n        }\n      };\n      const onMouseEnter = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          ref.focus();\n        }\n      };\n      const onMouseLeave = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          ref.blur();\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      ref.addEventListener('click', onClick);\n      ref.addEventListener('focus', onFocus);\n      ref.addEventListener('blur', onBlur);\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n        ref.removeEventListener('click', onClick);\n        ref.removeEventListener('focus', onFocus);\n        ref.removeEventListener('blur', onBlur);\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      as={props.as ?? 'li'}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'value',\n        'ref',\n      ])}\n      disabled={props.disabled}\n      role=\"option\"\n      tabindex={-1}\n      aria-selected={properties.isSelected(props.value)}\n      aria-disabled={props.disabled}\n      data-sh-select-option={context.ownerID}\n      data-sh-selected={properties.isSelected(props.value)}\n      data-sh-disabled={props.disabled}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessSelectOption\n        value={props.value}\n        disabled={props.disabled}\n      >\n        {props.children}\n      </HeadlessSelectOption>\n    </Dynamic>\n  );\n}\n", "import {\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  untrack,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  DynamicNode,\n  ValidConstructor,\n  WithRef,\n  createRef,\n} from '../utils/dynamic-prop';\nimport {\n  Button,\n  ButtonProps,\n} from './Button';\n\nexport type ToggleProps<T extends ValidConstructor = 'button'> = {\n  defaultPressed?: boolean;\n  pressed?: boolean;\n  onChange?: (value: boolean) => void;\n} & Omit<ButtonProps<T>, 'defaultPressed' | 'pressed' | 'onChange'>\n  & WithRef<T>;\n\nexport function Toggle<T extends ValidConstructor = 'button'>(\n  props: ToggleProps<T>,\n): JSX.Element {\n  const [state, setState] = createSignal(untrack(() => !!props.defaultPressed));\n  const toggleID = createUniqueId();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onClick = () => {\n        setState(!state());\n\n        props.onChange?.(state());\n      };\n\n      ref.addEventListener('click', onClick);\n      onCleanup(() => {\n        ref.removeEventListener('click', onClick);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      as={props.as}\n      {...omitProps(props, [\n        'defaultPressed',\n        'onChange',\n        'pressed',\n        'ref',\n      ])}\n      data-sh-toggle={toggleID}\n      aria-pressed={state()}\n      data-sh-pressed={state()}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    />\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  Show,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport {\n  Button,\n  ButtonProps,\n} from './Button';\nimport getFocusableElements from '../utils/get-focusable-elements';\n\ninterface PopoverContext {\n  ownerID: string;\n  buttonID: string;\n  panelID: string;\n  hovering: boolean;\n  anchor?: HTMLElement | null;\n}\n\nconst PopoverContext = createContext<PopoverContext>();\n\nfunction usePopoverContext(componentName: string): PopoverContext {\n  const context = useContext(PopoverContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Popover>`);\n}\n\nexport type PopoverProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  onClose?: () => void;\n  onOpen?: () => void;\n} & Omit<HeadlessDisclosureRootProps, 'CONTROLLED'>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps>;\n\nexport function Popover<T extends ValidConstructor = 'div'>(\n  props: PopoverProps<T>,\n): JSX.Element {\n  const [hovering, setHovering] = createSignal(false);\n  const ownerID = createUniqueId();\n  const buttonID = createUniqueId();\n  const panelID = createUniqueId();\n\n  let returnElement: HTMLElement | null = null;\n  if (typeof document !== 'undefined') {\n    returnElement = document.activeElement as HTMLElement | null;\n  }\n\n  onCleanup(() => {\n    returnElement?.focus();\n  });\n\n  return (\n    <PopoverContext.Provider\n      value={{\n        ownerID,\n        buttonID,\n        panelID,\n        get hovering() {\n          return hovering();\n        },\n        set hovering(value: boolean) {\n          setHovering(value);\n        },\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'isOpen',\n          'as',\n          'children',\n          'disabled',\n          'defaultOpen',\n          'onChange',\n        ])}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n        data-sh-popover={ownerID}\n      >\n        <HeadlessDisclosureRoot\n          CONTROLLED={'isOpen' in props}\n          isOpen={props.isOpen}\n          onChange={(value) => {\n            props.onChange?.(value);\n            if (!value) {\n              returnElement?.focus();\n              props.onClose?.();\n            } else {\n              returnElement = document.activeElement as HTMLElement | null;\n              props.onOpen?.();\n            }\n          }}\n          disabled={props.disabled}\n          defaultOpen={props.defaultOpen}\n        >\n          {props.children}\n        </HeadlessDisclosureRoot>\n      </Dynamic>\n    </PopoverContext.Provider>\n  );\n}\n\nexport type PopoverButtonProps<T extends ValidConstructor = 'button'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<ButtonProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function PopoverButton<T extends ValidConstructor = 'button'>(\n  props: PopoverButtonProps<T>,\n): JSX.Element {\n  const context = usePopoverContext('PopoverButton');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const toggle = () => {\n        if (!(properties.disabled() || props.disabled)) {\n          properties.setState(!properties.isOpen());\n        }\n      };\n\n      ref.addEventListener('click', toggle);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', toggle);\n      });\n\n      const onMouseEnter = () => {\n        context.hovering = true;\n      };\n      const onMouseLeave = () => {\n        context.hovering = false;\n      };\n\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      onCleanup(() => {\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={Button}\n      {...omitProps(props, [\n        'children',\n        'ref',\n      ])}\n      id={context.buttonID}\n      aria-disabled={properties.disabled() || props.disabled}\n      aria-expanded={properties.isOpen()}\n      aria-controls={properties.isOpen() && context.panelID}\n      data-sh-disabled={properties.disabled() || props.disabled}\n      data-sh-expanded={properties.isOpen()}\n      disabled={properties.disabled() || props.disabled}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n        if (e instanceof HTMLElement) {\n          context.anchor = e;\n        }\n      })}\n      data-sh-popover-button={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type PopoverPanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function PopoverPanel<T extends ValidConstructor = 'div'>(\n  props: PopoverPanelProps<T>,\n): JSX.Element {\n  const context = usePopoverContext('PopoverPanel');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      if (properties.isOpen()) {\n        const initialNodes = getFocusableElements(ref);\n        if (initialNodes.length) {\n          initialNodes[0].focus();\n        }\n\n        const onKeyDown = (e: KeyboardEvent) => {\n          if (!props.disabled) {\n            if (e.key === 'Tab') {\n              e.preventDefault();\n\n              const nodes = getFocusableElements(ref);\n              if (e.shiftKey) {\n                if (!document.activeElement || !ref.contains(document.activeElement)) {\n                  nodes[nodes.length - 1].focus();\n                } else {\n                  for (let i = 0, len = nodes.length; i < len; i += 1) {\n                    if (document.activeElement === nodes[i]) {\n                      if (i === 0) {\n                        nodes[len - 1].focus();\n                      } else {\n                        nodes[i - 1].focus();\n                      }\n                      break;\n                    }\n                  }\n                }\n              } else if (!document.activeElement || !ref.contains(document.activeElement)) {\n                nodes[0].focus();\n              } else {\n                for (let i = 0, len = nodes.length; i < len; i += 1) {\n                  if (document.activeElement === nodes[i]) {\n                    if (i === len - 1) {\n                      nodes[0].focus();\n                    } else {\n                      nodes[i + 1].focus();\n                    }\n                    break;\n                  }\n                }\n              }\n            } else if (e.key === 'Escape') {\n              properties.setState(false);\n            }\n          }\n        };\n\n        const onBlur = (e: FocusEvent) => {\n          if (context.hovering) {\n            return;\n          }\n          if (!e.relatedTarget || !ref.contains(e.relatedTarget as Node)) {\n            properties.setState(false);\n          }\n        };\n\n        ref.addEventListener('keydown', onKeyDown);\n        ref.addEventListener('focusout', onBlur);\n        onCleanup(() => {\n          ref.removeEventListener('keydown', onKeyDown);\n          ref.removeEventListener('focusout', onBlur);\n        });\n      }\n    }\n  });\n\n  return (\n    <Show\n      when={props.unmount ?? true}\n      fallback={(\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'unmount',\n            'children',\n            'ref',\n          ])}\n          id={context.panelID}\n          data-sh-popover-panel={context.ownerID}\n          ref={createRef(props, (e) => {\n            setInternalRef(() => e);\n          })}\n        >\n          <HeadlessDisclosureChild>\n            {props.children}\n          </HeadlessDisclosureChild>\n        </Dynamic>\n      )}\n    >\n      <Show when={properties.isOpen()}>\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'unmount',\n            'children',\n            'ref',\n          ])}\n          id={context.panelID}\n          data-sh-popover-panel={context.ownerID}\n          ref={createRef(props, (e) => {\n            setInternalRef(() => e);\n          })}\n        >\n          <HeadlessDisclosureChild>\n            {props.children}\n          </HeadlessDisclosureChild>\n        </Dynamic>\n      </Show>\n    </Show>\n  );\n}\n\nexport type PopoverOverlayProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function PopoverOverlay<T extends ValidConstructor = 'p'>(\n  props: PopoverOverlayProps<T>,\n): JSX.Element {\n  const context = usePopoverContext('PopoverOverlay');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onClick = () => {\n        properties.setState(false);\n      };\n\n      ref.addEventListener('click', onClick);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', onClick);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      data-sh-popover-overlay={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n", "import {\n  createUniqueId,\n} from 'solid-js';\nimport {\n  JSX,\n} from 'solid-js/jsx-runtime';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  DynamicProps,\n  ValidConstructor,\n} from '../utils/dynamic-prop';\n\nexport type AlertProps<T extends ValidConstructor = 'div'> = {\n  as?: T,\n} & Omit<DynamicProps<T>, 'as'>\n\nexport function Alert<T extends ValidConstructor = 'div'>(\n  props: AlertProps<T>,\n): JSX.Element {\n  const alertID = createUniqueId();\n\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      id={alertID}\n      {...omitProps(props, [\n        'as',\n      ])}\n      role=\"alert\"\n      data-sh-alert={alertID}\n    />\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createUniqueId,\n  useContext,\n  Show,\n  onCleanup,\n  createSignal,\n} from 'solid-js';\nimport {\n  JSX,\n} from 'solid-js/jsx-runtime';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport getFocusableElements from '../utils/get-focusable-elements';\n\ninterface AlertDialogContext {\n  ownerID: string;\n  panelID: string;\n  titleID: string;\n  descriptionID: string;\n}\n\nconst AlertDialogContext = createContext<AlertDialogContext>();\n\nfunction useAlertDialogContext(componentName: string): AlertDialogContext {\n  const context = useContext(AlertDialogContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <AlertDialog>`);\n}\n\nexport type AlertDialogProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n} & Omit<HeadlessDisclosureRootProps, 'CONTROLLED'>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps | 'unmount'>;\n\nexport function AlertDialog<T extends ValidConstructor = 'div'>(\n  props: AlertDialogProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const panelID = createUniqueId();\n  const titleID = createUniqueId();\n  const descriptionID = createUniqueId();\n\n  let returnElement: HTMLElement | null = null;\n  if (typeof document !== 'undefined') {\n    returnElement = document.activeElement as HTMLElement | null;\n  }\n\n  onCleanup(() => {\n    returnElement?.focus();\n  });\n\n  return (\n    <AlertDialogContext.Provider\n      value={{\n        ownerID,\n        panelID,\n        titleID,\n        descriptionID,\n      }}\n    >\n      <HeadlessDisclosureRoot\n        CONTROLLED={'isOpen' in props}\n        isOpen={props.isOpen}\n        onChange={(value) => {\n          props.onChange?.(value);\n          if (!value) {\n            props.onClose?.();\n            returnElement?.focus();\n          } else {\n            returnElement = document.activeElement as HTMLElement | null;\n            props.onOpen?.();\n          }\n        }}\n        defaultOpen={props.defaultOpen}\n        disabled={props.disabled}\n      >\n        {({ isOpen }) => (\n          <Show\n            when={props.unmount ?? true}\n            fallback={(\n              <Dynamic\n                component={props.as ?? 'div'}\n                {...omitProps(props, [\n                  'as',\n                  'children',\n                  'defaultOpen',\n                  'unmount',\n                  'isOpen',\n                  'disabled',\n                  'onClose',\n                  'onChange',\n                ])}\n                id={ownerID}\n                role=\"alertdialog\"\n                aria-modal\n                aria-labelledby={titleID}\n                aria-describedby={descriptionID}\n                data-sh-alert-dialog={ownerID}\n              >\n                <HeadlessDisclosureChild>\n                  {props.children}\n                </HeadlessDisclosureChild>\n              </Dynamic>\n            )}\n          >\n            <Show when={isOpen()}>\n              <Dynamic\n                component={props.as ?? 'div'}\n                {...omitProps(props, [\n                  'as',\n                  'children',\n                  'defaultOpen',\n                  'unmount',\n                  'isOpen',\n                  'disabled',\n                  'onClose',\n                  'onChange',\n                ])}\n                id={ownerID}\n                role=\"alertdialog\"\n                aria-modal\n                aria-labelledby={titleID}\n                aria-describedby={descriptionID}\n                data-sh-alert-dialog={ownerID}\n              >\n                <HeadlessDisclosureChild>\n                  {props.children}\n                </HeadlessDisclosureChild>\n              </Dynamic>\n            </Show>\n          </Show>\n        )}\n      </HeadlessDisclosureRoot>\n    </AlertDialogContext.Provider>\n  );\n}\n\nexport type AlertDialogTitleProps<T extends ValidConstructor = 'h2'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function AlertDialogTitle<T extends ValidConstructor = 'h2'>(\n  props: AlertDialogTitleProps<T>,\n): JSX.Element {\n  const context = useAlertDialogContext('AlertDialogTitle');\n  return (\n    <Dynamic\n      component={(props.as ?? 'h2') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.titleID}\n      data-sh-alert-dialog-title={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type AlertDialogPanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function AlertDialogPanel<T extends ValidConstructor = 'div'>(\n  props: AlertDialogPanelProps<T>,\n): JSX.Element {\n  const context = useAlertDialogContext('AlertDialogPanel');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      if (properties.isOpen()) {\n        const initialNodes = getFocusableElements(ref);\n        if (initialNodes.length) {\n          initialNodes[0].focus();\n        }\n\n        const onKeyDown = (e: KeyboardEvent) => {\n          if (!props.disabled) {\n            if (e.key === 'Tab') {\n              e.preventDefault();\n\n              const nodes = getFocusableElements(ref);\n              if (e.shiftKey) {\n                if (!document.activeElement || !ref.contains(document.activeElement)) {\n                  nodes[nodes.length - 1].focus();\n                } else {\n                  for (let i = 0, len = nodes.length; i < len; i += 1) {\n                    if (document.activeElement === nodes[i]) {\n                      if (i === 0) {\n                        nodes[len - 1].focus();\n                      } else {\n                        nodes[i - 1].focus();\n                      }\n                      break;\n                    }\n                  }\n                }\n              } else if (!document.activeElement || !ref.contains(document.activeElement)) {\n                nodes[0].focus();\n              } else {\n                for (let i = 0, len = nodes.length; i < len; i += 1) {\n                  if (document.activeElement === nodes[i]) {\n                    if (i === len - 1) {\n                      nodes[0].focus();\n                    } else {\n                      nodes[i + 1].focus();\n                    }\n                    break;\n                  }\n                }\n              }\n            } else if (e.key === 'Escape') {\n              properties.setState(false);\n            }\n          }\n        };\n\n        ref.addEventListener('keydown', onKeyDown);\n        onCleanup(() => {\n          ref.removeEventListener('keydown', onKeyDown);\n        });\n      }\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      id={context.panelID}\n      data-sh-alert-dialog-panel={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type AlertDialogOverlayProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function AlertDialogOverlay<T extends ValidConstructor = 'div'>(\n  props: AlertDialogOverlayProps<T>,\n): JSX.Element {\n  const context = useAlertDialogContext('AlertDialogOverlay');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const onClick = () => {\n        properties.setState(false);\n      };\n\n      ref.addEventListener('click', onClick);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', onClick);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      data-sh-alert-dialog-overlay={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type AlertDialogDescriptionProps<T extends ValidConstructor = 'p'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function AlertDialogDescription<T extends ValidConstructor = 'p'>(\n  props: AlertDialogDescriptionProps<T>,\n): JSX.Element {\n  const context = useAlertDialogContext('AlertDialogDescription');\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'p') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.descriptionID}\n      data-sh-alert-dialog-description={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n", "import {\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  DynamicProps,\n  ValidConstructor,\n} from '../utils/dynamic-prop';\n\nexport type ToastProps<T extends ValidConstructor = 'div'> = {\n  as?: T,\n  disabled?: boolean;\n} & Omit<DynamicProps<T>, 'as'>\n\nexport function Toast<T extends ValidConstructor = 'div'>(\n  props: ToastProps<T>,\n): JSX.Element {\n  const toastID = createUniqueId();\n\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      id={toastID}\n      {...omitProps(props, [\n        'as',\n      ])}\n      role=\"status\"\n      aria-live=\"polite\"\n      data-sh-toast={toastID}\n    />\n  );\n}\n\nexport type ToasterProps<T extends ValidConstructor = 'div'> = {\n  as?: T,\n  disabled?: boolean;\n} & Omit<DynamicProps<T>, 'as'>\n\nexport function Toaster<T extends ValidConstructor = 'div'>(\n  props: ToasterProps<T>,\n): JSX.Element {\n  const toasterID = createUniqueId();\n\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      id={toasterID}\n      {...omitProps(props, [\n        'as',\n      ])}\n      data-sh-toast={toasterID}\n    />\n  );\n}\n\nexport interface ToastData<T> {\n  id: string;\n  data: T;\n}\n\nexport type ToasterListener<T> = (queue: ToastData<T>[]) => void;\n\nexport class ToasterStore<T> {\n  private static toasterID = 0;\n\n  private id: number;\n\n  private queue: ToastData<T>[] = [];\n\n  private listeners = new Set<ToasterListener<T>>();\n\n  private toastID = 0;\n\n  constructor() {\n    this.id = ToasterStore.toasterID;\n    ToasterStore.toasterID += 1;\n  }\n\n  subscribe(callback: ToasterListener<T>): () => void {\n    this.listeners.add(callback);\n    return () => {\n      this.listeners.delete(callback);\n    };\n  }\n\n  private notify(): void {\n    const clone = [...this.queue];\n    for (const listener of this.listeners.keys()) {\n      listener(clone);\n    }\n  }\n\n  create(data: T): string {\n    const id = `toast-${this.id}-[${this.toastID}`;\n    this.toastID += 1;\n    this.queue.push({\n      id,\n      data,\n    });\n    this.notify();\n    return id;\n  }\n\n  remove(id: string): void {\n    this.queue = this.queue.filter((item) => item.id !== id);\n    this.notify();\n  }\n\n  clear(): void {\n    this.queue = [];\n    this.notify();\n  }\n\n  getQueue(): ToastData<T>[] {\n    return this.queue;\n  }\n}\n\nexport function useToaster<T>(toaster: ToasterStore<T>): () => ToastData<T>[] {\n  const [signal, setSignal] = createSignal(toaster.getQueue());\n\n  createEffect(() => {\n    onCleanup(toaster.subscribe(setSignal));\n  });\n\n  return signal;\n}\n", "import { JSX } from 'solid-js/jsx-runtime';\nimport {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  useContext,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessToggleChild,\n  HeadlessToggleChildProps,\n  HeadlessToggleRoot,\n  HeadlessToggleRootProps,\n  useHeadlessToggleChild,\n} from '../headless/Toggle';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport Fragment from '../utils/Fragment';\n\ninterface CheckboxContext {\n  ownerID: string;\n  labelID: string;\n  indicatorID: string;\n  descriptionID: string;\n}\n\nconst CheckboxContext = createContext<CheckboxContext>();\n\nfunction useCheckboxContext(componentName: string): CheckboxContext {\n  const context = useContext(CheckboxContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Checkbox>`);\n}\n\nexport type CheckboxProps<T extends ValidConstructor = typeof Fragment> = {\n  as?: T;\n} & Omit<HeadlessToggleRootProps, 'CONTROLLED'>\n  & Omit<DynamicProps<T>, keyof HeadlessToggleRootProps>;\n\nexport function Checkbox<T extends ValidConstructor = typeof Fragment>(\n  props: CheckboxProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const labelID = createUniqueId();\n  const indicatorID = createUniqueId();\n  const descriptionID = createUniqueId();\n\n  return (\n    <CheckboxContext.Provider\n      value={{\n        ownerID,\n        labelID,\n        indicatorID,\n        descriptionID,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? Fragment}\n        {...omitProps(props, [\n          'checked',\n          'as',\n          'children',\n          'disabled',\n          'defaultChecked',\n          'onChange',\n        ])}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n        data-sh-checkbox={ownerID}\n      >\n        <HeadlessToggleRoot\n          CONTROLLED={'checked' in props}\n          checked={props.checked}\n          onChange={props.onChange}\n          disabled={props.disabled}\n          defaultChecked={props.defaultChecked}\n        >\n          {props.children}\n        </HeadlessToggleRoot>\n      </Dynamic>\n    </CheckboxContext.Provider>\n  );\n}\n\nexport type CheckboxIndicatorProps<T extends ValidConstructor = 'button'> = {\n  as?: T;\n} & HeadlessToggleChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessToggleChildProps>;\n\nexport function CheckboxIndicator<T extends ValidConstructor = 'button'>(\n  props: CheckboxIndicatorProps<T>,\n): JSX.Element {\n  const context = useCheckboxContext('CheckboxIndicator');\n  const state = useHeadlessToggleChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const toggle = () => {\n        state.setState(!state.checked());\n      };\n\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === ' ') {\n          toggle();\n        }\n      };\n\n      ref.addEventListener('click', toggle);\n      ref.addEventListener('keydown', onKeyDown);\n      onCleanup(() => {\n        ref.removeEventListener('click', toggle);\n        ref.removeEventListener('keydown', onKeyDown);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={props.as ?? 'button'}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      id={context.indicatorID}\n      role=\"checkbox\"\n      data-sh-checkbox-indicator={context.ownerID}\n      aria-labelledby={context.labelID}\n      aria-describedby={context.descriptionID}\n      aria-disabled={state.disabled()}\n      aria-checked={state.checked() == null ? 'mixed' : state.checked()}\n      data-sh-disabled={state.disabled()}\n      data-sh-checked={state.checked()}\n      disabled={state.disabled()}\n      tabindex={0}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessToggleChild>\n        {props.children}\n      </HeadlessToggleChild>\n    </Dynamic>\n  );\n}\n\nexport type CheckboxLabelProps<T extends ValidConstructor = 'label'> = {\n  as?: T;\n} & HeadlessToggleChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessToggleChildProps>;\n\nexport function CheckboxLabel<T extends ValidConstructor = 'label'>(\n  props: CheckboxLabelProps<T>,\n): JSX.Element {\n  const context = useCheckboxContext('CheckboxLabel');\n  return (\n    <Dynamic\n      component={props.as ?? 'label'}\n      {...omitProps(props, [\n        'as',\n      ])}\n      id={context.labelID}\n      for={context.indicatorID}\n      data-sh-checkbox-label={context.ownerID}\n    >\n      {props.children}\n    </Dynamic>\n  );\n}\n\nexport type CheckboxDescriptionProps<T extends ValidConstructor = 'p'> = {\n  as?: T;\n} & HeadlessToggleChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessToggleChildProps>;\n\nexport function CheckboxDescription<T extends ValidConstructor = 'p'>(\n  props: CheckboxDescriptionProps<T>,\n): JSX.Element {\n  const context = useCheckboxContext('CheckboxDescription');\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'p') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.descriptionID}\n      data-sh-checkbox-description={context.ownerID}\n    >\n      <HeadlessToggleChild>\n        {props.children}\n      </HeadlessToggleChild>\n    </Dynamic>\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  useContext,\n} from 'solid-js';\nimport {\n  JSX,\n} from 'solid-js/jsx-runtime';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport { queryMenuItems } from '../utils/query-nodes';\n\ninterface MenuContext {\n  ownerID: string;\n  setChecked: (node: Element) => void;\n  setPrevChecked: (node: Element) => void;\n  setNextChecked: (node: Element) => void;\n  setFirstChecked: () => void;\n  setLastChecked: () => void;\n  setFirstMatch: (character: string) => void;\n}\n\nconst MenuContext = createContext<MenuContext>();\n\nfunction useMenuContext(componentName: string): MenuContext {\n  const context = useContext(MenuContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Menu>`);\n}\n\ninterface MenuProperties {\n  disabled: () => boolean;\n}\n\ntype MenuChildRenderProp = (\n  (properties: MenuProperties) => JSX.Element\n);\n\nfunction isMenuChildRenderProp(\n  children: MenuChildRenderProp | JSX.Element,\n): children is MenuChildRenderProp {\n  return typeof children === 'function' && children.length > 0;\n}\n\ninterface MenuChildProps {\n  disabled?: boolean;\n  children?: MenuChildRenderProp | JSX.Element;\n}\n\nfunction MenuChild(props: MenuChildProps): JSX.Element {\n  const body = props.children;\n  if (isMenuChildRenderProp(body)) {\n    return body({\n      disabled: () => !!props.disabled,\n    });\n  }\n  return body;\n}\n\nexport type MenuProps<T extends ValidConstructor = 'ul'> = {\n  as?: T;\n} & WithRef<T>\n  & Omit<DynamicProps<T>, 'as'>;\n\nexport function Menu<T extends ValidConstructor = 'ul'>(\n  props: MenuProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n\n  let internalRef: DynamicNode<T>;\n\n  function setChecked(node: Element) {\n    (node as HTMLElement).focus();\n  }\n\n  function setNextChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const items = queryMenuItems(internalRef, ownerID);\n      for (let i = 0, len = items.length; i < len; i += 1) {\n        if (node === items[i]) {\n          if (i === len - 1) {\n            setChecked(items[0]);\n          } else {\n            setChecked(items[i + 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setPrevChecked(node: Element) {\n    if (internalRef instanceof HTMLElement) {\n      const items = queryMenuItems(internalRef, ownerID);\n      for (let i = 0, len = items.length; i < len; i += 1) {\n        if (node === items[i]) {\n          if (i === 0) {\n            setChecked(items[len - 1]);\n          } else {\n            setChecked(items[i - 1]);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  function setFirstChecked() {\n    if (internalRef instanceof HTMLElement) {\n      const items = queryMenuItems(internalRef, ownerID);\n      setChecked(items[0]);\n    }\n  }\n\n  function setLastChecked() {\n    if (internalRef instanceof HTMLElement) {\n      const items = queryMenuItems(internalRef, ownerID);\n      setChecked(items[items.length - 1]);\n    }\n  }\n\n  function setFirstMatch(character: string) {\n    if (internalRef instanceof HTMLElement) {\n      const items = queryMenuItems(internalRef, ownerID);\n      const lower = character.toLowerCase();\n      for (let i = 0, l = items.length; i < l; i += 1) {\n        if (items[i].textContent?.toLowerCase().startsWith(lower)) {\n          setChecked(items[i]);\n          return;\n        }\n      }\n    }\n  }\n\n  return (\n    <MenuContext.Provider\n      value={{\n        ownerID,\n        setChecked,\n        setFirstChecked,\n        setLastChecked,\n        setNextChecked,\n        setPrevChecked,\n        setFirstMatch,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'as',\n          'ref',\n        ])}\n        id={ownerID}\n        role=\"menu\"\n        data-sh-menu={ownerID}\n        ref={createRef(props, (e) => {\n          internalRef = e;\n        })}\n      />\n    </MenuContext.Provider>\n  );\n}\n\nexport type MenuItemProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n}\n  & MenuChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof MenuChildProps>;\n\nexport function MenuItem<T extends ValidConstructor = 'li'>(\n  props: MenuItemProps<T>,\n): JSX.Element {\n  const context = useMenuContext('Menu');\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  let characters = '';\n  let timeout: ReturnType<typeof setTimeout> | undefined;\n\n  onCleanup(() => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n  });\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (!props.disabled) {\n          switch (e.key) {\n            case 'ArrowUp':\n            case 'ArrowLeft':\n              e.preventDefault();\n              context.setPrevChecked(ref);\n              break;\n            case 'ArrowDown':\n            case 'ArrowRight':\n              e.preventDefault();\n              context.setNextChecked(ref);\n              break;\n            case ' ':\n            case 'Enter':\n              if (ref.tagName === 'BUTTON') {\n                e.preventDefault();\n              }\n              ref.click();\n              break;\n            case 'Home':\n              e.preventDefault();\n              context.setFirstChecked();\n              break;\n            case 'End':\n              e.preventDefault();\n              context.setLastChecked();\n              break;\n            default:\n              if (e.key.length === 1) {\n                characters = `${characters}${e.key}`;\n                if (timeout) {\n                  clearTimeout(timeout);\n                }\n                timeout = setTimeout(() => {\n                  context.setFirstMatch(characters);\n                  characters = '';\n                }, 100);\n              }\n              break;\n          }\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      {...omitProps(props, [\n        'as',\n        'disabled',\n        'ref',\n      ])}\n      disabled={props.disabled}\n      role=\"menuitem\"\n      tabindex={-1}\n      aria-disabled={props.disabled}\n      data-sh-menu-item={context.ownerID}\n      data-sh-disabled={props.disabled}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <MenuChild disabled={!!props.disabled}>\n        {props.children}\n      </MenuChild>\n    </Dynamic>\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createSignal,\n  createUniqueId,\n  onCleanup,\n  Show,\n  useContext,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport getFocusableElements from '../utils/get-focusable-elements';\n\ninterface ContextMenuContext {\n  ownerID: string;\n  boundaryID: string;\n  panelID: string;\n  anchor?: HTMLElement | null;\n}\n\nconst ContextMenuContext = createContext<ContextMenuContext>();\n\nfunction useContextMenuContext(componentName: string): ContextMenuContext {\n  const context = useContext(ContextMenuContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <ContextMenu>`);\n}\n\nexport type ContextMenuProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  onOpen?: () => void;\n  onClose?: () => void;\n} & Omit<HeadlessDisclosureRootProps, 'CONTROLLED'>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps>;\n\nexport function ContextMenu<T extends ValidConstructor = 'div'>(\n  props: ContextMenuProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const boundaryID = createUniqueId();\n  const panelID = createUniqueId();\n\n  let returnElement: HTMLElement | null = null;\n  if (typeof document !== 'undefined') {\n    returnElement = document.activeElement as HTMLElement | null;\n  }\n\n  onCleanup(() => {\n    returnElement?.focus();\n  });\n\n  return (\n    <ContextMenuContext.Provider\n      value={{\n        ownerID,\n        boundaryID,\n        panelID,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'isOpen',\n          'as',\n          'children',\n          'disabled',\n          'defaultOpen',\n          'onChange',\n        ])}\n        disabled={props.disabled}\n        aria-disabled={props.disabled}\n        data-sh-disabled={props.disabled}\n        data-sh-context-menu={ownerID}\n      >\n        <HeadlessDisclosureRoot\n          CONTROLLED={'isOpen' in props}\n          isOpen={props.isOpen}\n          onChange={(value) => {\n            props.onChange?.(value);\n            if (!value) {\n              returnElement?.focus();\n              props.onClose?.();\n            } else {\n              returnElement = document.activeElement as HTMLElement | null;\n              props.onOpen?.();\n            }\n          }}\n          disabled={props.disabled}\n          defaultOpen={props.defaultOpen}\n        >\n          {props.children}\n        </HeadlessDisclosureRoot>\n      </Dynamic>\n    </ContextMenuContext.Provider>\n  );\n}\n\nexport type ContextMenuBoundaryProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function ContextMenuBoundary<T extends ValidConstructor = 'div'>(\n  props: ContextMenuBoundaryProps<T>,\n): JSX.Element {\n  const context = useContextMenuContext('ContextMenuBoundary');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const toggle = (e: MouseEvent) => {\n        if (!properties.disabled()) {\n          e.preventDefault();\n          properties.setState(true);\n        }\n      };\n\n      ref.addEventListener('contextmenu', toggle);\n\n      onCleanup(() => {\n        ref.removeEventListener('contextmenu', toggle);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={props.as ?? 'div'}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      id={context.boundaryID}\n      aria-disabled={properties.disabled()}\n      aria-expanded={properties.isOpen()}\n      aria-controls={properties.isOpen() && context.panelID}\n      data-sh-disabled={properties.disabled()}\n      data-sh-expanded={properties.isOpen()}\n      disabled={properties.disabled()}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n        if (e instanceof HTMLElement) {\n          context.anchor = e;\n        }\n      })}\n      data-sh-context-menu-boundary={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type ContextMenuPanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function ContextMenuPanel<T extends ValidConstructor = 'div'>(\n  props: ContextMenuPanelProps<T>,\n): JSX.Element {\n  const context = useContextMenuContext('ContextMenuPanel');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      if (properties.isOpen()) {\n        const onKeyDown = (e: KeyboardEvent) => {\n          if (!props.disabled) {\n            if (e.key === 'Tab') {\n              e.preventDefault();\n\n              const nodes = getFocusableElements(ref);\n              if (e.shiftKey) {\n                if (!document.activeElement || !ref.contains(document.activeElement)) {\n                  nodes[nodes.length - 1].focus();\n                } else {\n                  for (let i = 0, len = nodes.length; i < len; i += 1) {\n                    if (document.activeElement === nodes[i]) {\n                      if (i === 0) {\n                        nodes[len - 1].focus();\n                      } else {\n                        nodes[i - 1].focus();\n                      }\n                      break;\n                    }\n                  }\n                }\n              } else if (!document.activeElement || !ref.contains(document.activeElement)) {\n                nodes[0].focus();\n              } else {\n                for (let i = 0, len = nodes.length; i < len; i += 1) {\n                  if (document.activeElement === nodes[i]) {\n                    if (i === len - 1) {\n                      nodes[0].focus();\n                    } else {\n                      nodes[i + 1].focus();\n                    }\n                    break;\n                  }\n                }\n              }\n            } else if (e.key === 'Escape') {\n              properties.setState(false);\n            }\n          }\n        };\n\n        const onClickOutside = (e: FocusEvent) => {\n          if (!ref.contains(e.target as Node)) {\n            properties.setState(false);\n          }\n        };\n\n        ref.addEventListener('keydown', onKeyDown);\n        document.addEventListener('click', onClickOutside);\n        onCleanup(() => {\n          ref.removeEventListener('keydown', onKeyDown);\n          document.removeEventListener('click', onClickOutside);\n        });\n      }\n    }\n  });\n\n  return (\n    <Show\n      when={props.unmount ?? true}\n      fallback={(\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'unmount',\n            'children',\n            'ref',\n          ])}\n          id={context.panelID}\n          data-sh-context-menu-panel={context.ownerID}\n          ref={createRef(props, (e) => {\n            setInternalRef(() => e);\n          })}\n        >\n          <HeadlessDisclosureChild>\n            {props.children}\n          </HeadlessDisclosureChild>\n        </Dynamic>\n      )}\n    >\n      <Show when={properties.isOpen()}>\n        <Dynamic\n          component={props.as ?? 'div'}\n          {...omitProps(props, [\n            'as',\n            'unmount',\n            'children',\n            'ref',\n          ])}\n          id={context.panelID}\n          data-sh-context-menu-panel={context.ownerID}\n          ref={createRef(props, (e) => {\n            setInternalRef(() => e);\n          })}\n        >\n          <HeadlessDisclosureChild>\n            {props.children}\n          </HeadlessDisclosureChild>\n        </Dynamic>\n      </Show>\n    </Show>\n  );\n}\n\nexport type ContextMenuOverlayProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function ContextMenuOverlay<T extends ValidConstructor = 'div'>(\n  props: ContextMenuOverlayProps<T>,\n): JSX.Element {\n  const context = useContextMenuContext('ContextMenuOverlay');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onClick = () => {\n        properties.setState(false);\n      };\n\n      ref.addEventListener('click', onClick);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', onClick);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      data-sh-context-menu-overlay={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createUniqueId,\n  useContext,\n  onCleanup,\n  createSignal,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport getFocusableElements from '../utils/get-focusable-elements';\nimport { queryFeedArticles } from '../utils/query-nodes';\n\ninterface FeedContext {\n  ownerID: string;\n  labelID: string;\n  contentID: string;\n  size: number;\n  busy: boolean;\n  focusPrev: () => void;\n  focusNext: () => void;\n}\n\nconst FeedContext = createContext<FeedContext>();\n\nfunction useFeedContext(componentName: string): FeedContext {\n  const context = useContext(FeedContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <Feed>`);\n}\n\ninterface FeedContentContext {\n  focusPrev: (el: Element) => void;\n  focusNext: (el: Element) => void;\n}\n\nconst FeedContentContext = createContext<FeedContentContext>();\n\nfunction useFeedContentContext(componentName: string): FeedContentContext {\n  const context = useContext(FeedContentContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <FeedContent>`);\n}\n\ninterface FeedArticleContext {\n  ownerID: string;\n  labelID: string;\n  descriptionID: string;\n}\n\nconst FeedArticleContext = createContext<FeedArticleContext>();\n\nfunction useFeedArticleContext(componentName: string): FeedArticleContext {\n  const context = useContext(FeedArticleContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <FeedArticle>`);\n}\n\nexport type FeedProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  size: number;\n  busy?: boolean;\n} & WithRef<T> & Omit<DynamicProps<T>, 'size' | 'busy'>;\n\nexport function Feed<T extends ValidConstructor = 'div'>(\n  props: FeedProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const labelID = createUniqueId();\n  const contentID = createUniqueId();\n\n  let internalRef: DynamicNode<T>;\n\n  return (\n    <FeedContext.Provider\n      value={{\n        ownerID,\n        labelID,\n        contentID,\n        get size() {\n          return props.size;\n        },\n        get busy() {\n          return !!props.busy;\n        },\n        focusNext() {\n          const nodes = getFocusableElements(document.documentElement);\n          for (let i = 0, len = nodes.length; i < len; i += 1) {\n            if (internalRef === nodes[i]) {\n              if (i === len - 1) {\n                nodes[0].focus();\n              } else {\n                nodes[i + 1].focus();\n              }\n              break;\n            }\n          }\n        },\n        focusPrev() {\n          const nodes = getFocusableElements(document.documentElement);\n          for (let i = 0, len = nodes.length; i < len; i += 1) {\n            if (internalRef === nodes[i]) {\n              if (i === 0) {\n                nodes[len - 1].focus();\n              } else {\n                nodes[i - 1].focus();\n              }\n              break;\n            }\n          }\n        },\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'div'}\n        {...omitProps(props, [\n          'as',\n          'busy',\n          'size',\n        ])}\n        id={ownerID}\n        data-sh-feed={ownerID}\n        ref={createRef(props, (e) => {\n          internalRef = e;\n        })}\n      />\n    </FeedContext.Provider>\n  );\n}\n\nexport type FeedLabelProps<T extends ValidConstructor = 'span'> = {\n  as?: T;\n} & DynamicProps<T>;\n\nexport function FeedLabel<T extends ValidConstructor = 'span'>(\n  props: FeedLabelProps<T>,\n): JSX.Element {\n  const context = useFeedContext('FeedLabel');\n  return (\n    <Dynamic\n      component={(props.as ?? 'span') as T}\n      {...omitProps(props, [\n        'as',\n      ])}\n      id={context.labelID}\n      data-sh-feed-label={context.ownerID}\n    />\n  );\n}\n\nexport type FeedContentProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & WithRef<T> & DynamicProps<T>;\n\nexport function FeedContent<T extends ValidConstructor = 'div'>(\n  props: FeedContentProps<T>,\n): JSX.Element {\n  const context = useFeedContext('FeedContent');\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  function setChecked(node: Element) {\n    (node as HTMLElement).focus();\n  }\n\n  function focusNext(node: Element) {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const articles = queryFeedArticles(ref, context.ownerID);\n      for (let i = 0, len = articles.length; i < len; i += 1) {\n        if (node === articles[i] && i + 1 < len) {\n          setChecked(articles[i + 1]);\n          break;\n        }\n      }\n    }\n  }\n\n  function focusPrev(node: Element) {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const articles = queryFeedArticles(ref, context.ownerID);\n      for (let i = 0, len = articles.length; i < len; i += 1) {\n        if (node === articles[i] && i - 1 >= 0) {\n          setChecked(articles[i - 1]);\n          break;\n        }\n      }\n    }\n  }\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        if (e.ctrlKey) {\n          switch (e.key) {\n            case 'Home':\n              context.focusPrev();\n              break;\n            case 'End':\n              context.focusNext();\n              break;\n            default:\n              break;\n          }\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n      });\n    }\n  });\n\n  return (\n    <FeedContentContext.Provider\n      value={{\n        focusNext,\n        focusPrev,\n      }}\n    >\n      <Dynamic\n        component={(props.as ?? 'div') as T}\n        {...omitProps(props, [\n          'as',\n        ])}\n        id={context.contentID}\n        role=\"feed\"\n        aria-labelledby={context.labelID}\n        aria-busy={context.busy}\n        data-sh-feed-content={context.ownerID}\n        ref={createRef<T>(props, (e) => {\n          setInternalRef(() => e);\n        })}\n      />\n    </FeedContentContext.Provider>\n  );\n}\n\nexport type FeedArticleProps<T extends ValidConstructor = 'article'> = {\n  as?: T;\n  index: number;\n} & WithRef<T> & Omit<DynamicProps<T>, 'index'>;\n\nexport function FeedArticle<T extends ValidConstructor = 'article'>(\n  props: FeedArticleProps<T>,\n): JSX.Element {\n  const rootContext = useFeedContext('FeedArticle');\n  const contentContext = useFeedContentContext('FeedArticle');\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      const onKeyDown = (e: KeyboardEvent) => {\n        switch (e.key) {\n          case 'PageUp':\n            contentContext.focusPrev(ref);\n            break;\n          case 'PageDown':\n            contentContext.focusNext(ref);\n            break;\n          default:\n            break;\n        }\n      };\n\n      ref.addEventListener('keydown', onKeyDown);\n      onCleanup(() => {\n        ref.removeEventListener('keydown', onKeyDown);\n      });\n    }\n  });\n\n  const ownerID = createUniqueId();\n  const labelID = createUniqueId();\n  const descriptionID = createUniqueId();\n\n  return (\n    <FeedArticleContext.Provider\n      value={{\n        ownerID,\n        labelID,\n        descriptionID,\n      }}\n    >\n      <Dynamic\n        component={props.as ?? 'article'}\n        {...omitProps(props, [\n          'as',\n        ])}\n        id={ownerID}\n        aria-posinset={props.index + 1}\n        aria-setsize={rootContext.size}\n        aria-labelledby={labelID}\n        aria-describedby={descriptionID}\n        data-sh-feed-article={rootContext.ownerID}\n        tabindex={0}\n        ref={createRef<T>(props, (e) => {\n          setInternalRef(() => e);\n        })}\n      />\n    </FeedArticleContext.Provider>\n  );\n}\n\nexport type FeedArticleLabelProps<T extends ValidConstructor = 'span'> = {\n  as?: T;\n} & DynamicProps<T>;\n\nexport function FeedArticleLabel<T extends ValidConstructor = 'span'>(\n  props: FeedArticleLabelProps<T>,\n): JSX.Element {\n  const context = useFeedArticleContext('FeedArticleLabel');\n  return (\n    <Dynamic\n      component={(props.as ?? 'span') as T}\n      {...omitProps(props, [\n        'as',\n      ])}\n      id={context.labelID}\n      data-sh-feed-article-label={context.ownerID}\n    />\n  );\n}\n\nexport type FeedArticleDescriptionProps<T extends ValidConstructor = 'p'> = {\n  as?: T;\n} & DynamicProps<T>;\n\nexport function FeedArticleDescription<T extends ValidConstructor = 'p'>(\n  props: FeedArticleDescriptionProps<T>,\n): JSX.Element {\n  const context = useFeedArticleContext('FeedArticleDescription');\n  return (\n    <Dynamic\n      component={(props.as ?? 'p') as T}\n      {...omitProps(props, [\n        'as',\n      ])}\n      id={context.descriptionID}\n      role=\"feed\"\n      data-sh-feed-article-description={context.ownerID}\n    />\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createUniqueId,\n  useContext,\n  Show,\n  onCleanup,\n  createSignal,\n  JSX,\n} from 'solid-js';\nimport {\n  Dynamic,\n} from 'solid-js/web';\nimport {\n  omitProps,\n} from 'solid-use';\nimport {\n  HeadlessDisclosureChild,\n  HeadlessDisclosureChildProps,\n  HeadlessDisclosureRoot,\n  HeadlessDisclosureRootProps,\n  useHeadlessDisclosureChild,\n} from '../headless/Disclosure';\nimport {\n  createRef,\n  DynamicNode,\n  DynamicProps,\n  ValidConstructor,\n  WithRef,\n} from '../utils/dynamic-prop';\nimport getFocusableElements from '../utils/get-focusable-elements';\n\ninterface CommandBarContext {\n  ownerID: string;\n  panelID: string;\n  titleID: string;\n  descriptionID: string;\n  onOpen?: () => void;\n  onClose?: () => void;\n}\n\nconst CommandBarContext = createContext<CommandBarContext>();\n\nfunction useCommandBarContext(componentName: string): CommandBarContext {\n  const context = useContext(CommandBarContext);\n\n  if (context) {\n    return context;\n  }\n  throw new Error(`<${componentName}> must be used inside a <CommandBar>`);\n}\n\nexport type CommandBarProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n  unmount?: boolean;\n  onClose?: () => void;\n  onOpen?: () => void;\n} & HeadlessDisclosureRootProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureRootProps | 'unmount'>;\n\nfunction CommandBarEvents(props: { children: JSX.Element }): JSX.Element {\n  const properties = useHeadlessDisclosureChild();\n\n  createEffect(() => {\n    const onKeyDown = (ev: KeyboardEvent) => {\n      if ((ev.metaKey || ev.ctrlKey) && ev.key === 'k' && ev.defaultPrevented === false) {\n        ev.preventDefault();\n        properties.setState(true);\n      }\n    };\n\n    window.addEventListener('keydown', onKeyDown);\n    onCleanup(() => {\n      window.removeEventListener('keydown', onKeyDown);\n    });\n  });\n\n  return () => props.children;\n}\n\nexport function CommandBar<T extends ValidConstructor = 'div'>(\n  props: CommandBarProps<T>,\n): JSX.Element {\n  const ownerID = createUniqueId();\n  const panelID = createUniqueId();\n  const titleID = createUniqueId();\n  const descriptionID = createUniqueId();\n\n  let returnElement: HTMLElement | null = null;\n  if (typeof document !== 'undefined') {\n    returnElement = document.activeElement as HTMLElement | null;\n  }\n\n  onCleanup(() => {\n    returnElement?.focus();\n  });\n\n  return (\n    <CommandBarContext.Provider\n      value={{\n        ownerID,\n        panelID,\n        titleID,\n        descriptionID,\n      }}\n    >\n      <HeadlessDisclosureRoot\n        CONTROLLED={'isOpen' in props}\n        isOpen={props.isOpen}\n        onChange={(value) => {\n          props.onChange?.(value);\n          if (!value) {\n            props.onClose?.();\n            returnElement?.focus();\n          } else {\n            returnElement = document.activeElement as HTMLElement | null;\n            props.onOpen?.();\n          }\n        }}\n        defaultOpen={props.defaultOpen}\n        disabled={props.disabled}\n      >\n        {({ isOpen }) => (\n          <CommandBarEvents>\n            <Show\n              when={props.unmount ?? true}\n              fallback={(\n                <Dynamic\n                  component={props.as ?? 'div'}\n                  {...omitProps(props, [\n                    'as',\n                    'children',\n                    'defaultOpen',\n                    'unmount',\n                    'isOpen',\n                    'disabled',\n                    'onClose',\n                    'onChange',\n                  ])}\n                  id={ownerID}\n                  role=\"dialog\"\n                  aria-modal\n                  aria-labelledby={titleID}\n                  aria-describedby={descriptionID}\n                  data-sh-command-bar={ownerID}\n                >\n                  <HeadlessDisclosureChild>\n                    {props.children}\n                  </HeadlessDisclosureChild>\n                </Dynamic>\n              )}\n            >\n              <Show when={isOpen()}>\n                <Dynamic\n                  component={props.as ?? 'div'}\n                  {...omitProps(props, [\n                    'as',\n                    'children',\n                    'defaultOpen',\n                    'unmount',\n                    'isOpen',\n                    'disabled',\n                    'onClose',\n                    'onChange',\n                  ])}\n                  id={ownerID}\n                  role=\"dialog\"\n                  aria-modal\n                  aria-labelledby={titleID}\n                  aria-describedby={descriptionID}\n                  data-sh-command-bar={ownerID}\n                >\n                  <HeadlessDisclosureChild>\n                    {props.children}\n                  </HeadlessDisclosureChild>\n                </Dynamic>\n              </Show>\n            </Show>\n          </CommandBarEvents>\n        )}\n      </HeadlessDisclosureRoot>\n    </CommandBarContext.Provider>\n  );\n}\n\nexport type CommandBarTitleProps<T extends ValidConstructor = 'h2'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function CommandBarTitle<T extends ValidConstructor = 'h2'>(\n  props: CommandBarTitleProps<T>,\n): JSX.Element {\n  const context = useCommandBarContext('CommandBarTitle');\n  return (\n    <Dynamic\n      component={(props.as ?? 'h2') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.titleID}\n      data-sh-command-bar-title={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type CommandBarPanelProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function CommandBarPanel<T extends ValidConstructor = 'div'>(\n  props: CommandBarPanelProps<T>,\n): JSX.Element {\n  const context = useCommandBarContext('CommandBarPanel');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n    if (ref instanceof HTMLElement) {\n      if (properties.isOpen()) {\n        const initialNodes = getFocusableElements(ref);\n        if (initialNodes.length) {\n          initialNodes[0].focus();\n        }\n\n        const onKeyDown = (e: KeyboardEvent) => {\n          if (!props.disabled) {\n            if (e.key === 'Tab') {\n              e.preventDefault();\n\n              const nodes = getFocusableElements(ref);\n              if (e.shiftKey) {\n                if (!document.activeElement || !ref.contains(document.activeElement)) {\n                  nodes[nodes.length - 1].focus();\n                } else {\n                  for (let i = 0, len = nodes.length; i < len; i += 1) {\n                    if (document.activeElement === nodes[i]) {\n                      if (i === 0) {\n                        nodes[len - 1].focus();\n                      } else {\n                        nodes[i - 1].focus();\n                      }\n                      break;\n                    }\n                  }\n                }\n              } else if (!document.activeElement || !ref.contains(document.activeElement)) {\n                nodes[0].focus();\n              } else {\n                for (let i = 0, len = nodes.length; i < len; i += 1) {\n                  if (document.activeElement === nodes[i]) {\n                    if (i === len - 1) {\n                      nodes[0].focus();\n                    } else {\n                      nodes[i + 1].focus();\n                    }\n                    break;\n                  }\n                }\n              }\n            } else if (e.key === 'Escape') {\n              properties.setState(false);\n            }\n          }\n        };\n\n        ref.addEventListener('keydown', onKeyDown);\n        onCleanup(() => {\n          ref.removeEventListener('keydown', onKeyDown);\n        });\n      }\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      id={context.panelID}\n      data-sh-command-bar-panel={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type CommandBarOverlayProps<T extends ValidConstructor = 'div'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & WithRef<T>\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function CommandBarOverlay<T extends ValidConstructor = 'p'>(\n  props: CommandBarOverlayProps<T>,\n): JSX.Element {\n  const context = useCommandBarContext('CommandBarOverlay');\n  const properties = useHeadlessDisclosureChild();\n\n  const [internalRef, setInternalRef] = createSignal<DynamicNode<T>>();\n\n  createEffect(() => {\n    const ref = internalRef();\n\n    if (ref instanceof HTMLElement) {\n      const onClick = () => {\n        properties.setState(false);\n      };\n\n      ref.addEventListener('click', onClick);\n\n      onCleanup(() => {\n        ref.removeEventListener('click', onClick);\n      });\n    }\n  });\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'div') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n        'ref',\n      ])}\n      data-sh-command-bar-overlay={context.ownerID}\n      ref={createRef(props, (e) => {\n        setInternalRef(() => e);\n      })}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n\nexport type CommandBarDescriptionProps<T extends ValidConstructor = 'p'> = {\n  as?: T;\n} & HeadlessDisclosureChildProps\n  & Omit<DynamicProps<T>, keyof HeadlessDisclosureChildProps>;\n\nexport function CommandBarDescription<T extends ValidConstructor = 'p'>(\n  props: CommandBarDescriptionProps<T>,\n): JSX.Element {\n  const context = useCommandBarContext('CommandBarDescription');\n\n  return (\n    <Dynamic\n      component={(props.as ?? 'p') as T}\n      {...omitProps(props, [\n        'as',\n        'children',\n      ])}\n      id={context.descriptionID}\n      data-sh-command-bar-description={context.ownerID}\n    >\n      <HeadlessDisclosureChild>\n        {props.children}\n      </HeadlessDisclosureChild>\n    </Dynamic>\n  );\n}\n", "import {\n  createContext,\n  createEffect,\n  createMemo,\n  onCleanup,\n  useContext,\n} from 'solid-js';\nimport {\n  JSX,\n} from 'solid-js/jsx-runtime';\nimport {\n  usePageVisibility,\n  usePrefersDark,\n} from 'solid-use';\nimport useControlledSignal from '../utils/use-controlled-signal';\n\nexport type NativeColorScheme = 'light' | 'dark';\nexport type ColorScheme = NativeColorScheme | 'system';\n\nexport interface ColorSchemeProviderProps {\n  initialValue?: ColorScheme;\n  value?: ColorScheme;\n  onChange?: (scheme: ColorScheme) => void;\n  children?: JSX.Element;\n}\n\ninterface ColorSchemeContext {\n  value: ColorScheme;\n  setValue: (newScheme: ColorScheme) => void;\n  native: NativeColorScheme;\n  preferred: NativeColorScheme;\n}\n\nconst ColorSchemeContext = createContext<ColorSchemeContext>();\n\nconst STORAGE_KEY = 'theme-preference';\n\nexport function ColorSchemeProvider(props: ColorSchemeProviderProps) {\n  const [get, set] = useControlledSignal<ColorScheme>(\n    props.initialValue ?? 'system',\n    'value' in props ? (() => props.value ?? 'system') : undefined,\n    (value) => props.onChange?.(value),\n  );\n\n  const prefersDark = usePrefersDark();\n  const isVisible = usePageVisibility();\n\n  const shouldToggle = createMemo(() => (\n    (get() === 'system' && prefersDark()) || (get() === 'dark')\n  ));\n\n  // Since storage events only work for other windows\n  // we need to make the main window sync\n  createEffect(() => {\n    isVisible();\n\n    const onChange = () => {\n      const value = localStorage.getItem(STORAGE_KEY);\n\n      if (value) {\n        set(value as ColorScheme);\n      } else {\n        set('system');\n      }\n    };\n    window.addEventListener('storage', onChange, false);\n\n    onChange();\n\n    onCleanup(() => {\n      window.removeEventListener('storage', onChange, false);\n    });\n  });\n\n  // Sync storage when signal changes\n  createEffect(() => {\n    localStorage.setItem(STORAGE_KEY, get());\n  });\n\n  // Sync document class\n  createEffect(() => {\n    document.documentElement.classList.toggle(\n      'dark',\n      shouldToggle(),\n    );\n  });\n\n  return (\n    <ColorSchemeContext.Provider\n      value={{\n        get value() {\n          return get();\n        },\n        setValue(val) {\n          set(val);\n        },\n        get preferred() {\n          return shouldToggle() ? 'dark' : 'light';\n        },\n        get native() {\n          return prefersDark() ? 'dark' : 'light';\n        },\n      }}\n    >\n      {props.children}\n    </ColorSchemeContext.Provider>\n  );\n}\n\nfunction useColorSchemeContext(): ColorSchemeContext {\n  const ctx = useContext(ColorSchemeContext);\n  if (ctx) {\n    return ctx;\n  }\n  throw new Error('Missing <ColorSchemeProvider>');\n}\n\nexport function useColorScheme(): [() => ColorScheme, (newScheme: ColorScheme) => void] {\n  const ctx = useColorSchemeContext();\n  return [\n    () => ctx.value,\n    ctx.setValue,\n  ];\n}\n\nexport function useNativeColorScheme(): () => NativeColorScheme {\n  const ctx = useColorSchemeContext();\n  return () => ctx.native;\n}\n\nexport function usePreferredColorScheme(): () => NativeColorScheme {\n  const ctx = useColorSchemeContext();\n  return () => ctx.preferred;\n}\n"],
  "mappings": "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",
  "names": []
}
